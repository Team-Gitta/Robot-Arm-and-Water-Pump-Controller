
robotarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800944c  0800944c  0001944c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009468  08009468  00019468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009470  08009470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009474  08009474  00019474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08009478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          00000888  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000918  20000918  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020301  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000446b  00000000  00000000  000403c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001930  00000000  00000000  00044830  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001740  00000000  00000000  00046160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c833  00000000  00000000  000478a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007776  00000000  00000000  000540d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005b849  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006af0  00000000  00000000  0005b8c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009434 	.word	0x08009434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009434 	.word	0x08009434

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4a7b      	ldr	r2, [pc, #492]	; (80006e0 <MX_GPIO_Init+0x208>)
 80004f4:	4b7a      	ldr	r3, [pc, #488]	; (80006e0 <MX_GPIO_Init+0x208>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b78      	ldr	r3, [pc, #480]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4a74      	ldr	r2, [pc, #464]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000510:	4b73      	ldr	r3, [pc, #460]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b71      	ldr	r3, [pc, #452]	; (80006e0 <MX_GPIO_Init+0x208>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4a6d      	ldr	r2, [pc, #436]	; (80006e0 <MX_GPIO_Init+0x208>)
 800052c:	4b6c      	ldr	r3, [pc, #432]	; (80006e0 <MX_GPIO_Init+0x208>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b6a      	ldr	r3, [pc, #424]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4a66      	ldr	r2, [pc, #408]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000548:	4b65      	ldr	r3, [pc, #404]	; (80006e0 <MX_GPIO_Init+0x208>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b63      	ldr	r3, [pc, #396]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4a5f      	ldr	r2, [pc, #380]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000564:	4b5e      	ldr	r3, [pc, #376]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4a58      	ldr	r2, [pc, #352]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000580:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <MX_GPIO_Init+0x208>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <MX_GPIO_Init+0x208>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4852      	ldr	r0, [pc, #328]	; (80006e4 <MX_GPIO_Init+0x20c>)
 800059c:	f001 f994 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4850      	ldr	r0, [pc, #320]	; (80006e8 <MX_GPIO_Init+0x210>)
 80005a6:	f001 f98f 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80005b0:	484e      	ldr	r0, [pc, #312]	; (80006ec <MX_GPIO_Init+0x214>)
 80005b2:	f001 f989 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80005b6:	2200      	movs	r2, #0
 80005b8:	f64f 7110 	movw	r1, #65296	; 0xff10
 80005bc:	484c      	ldr	r0, [pc, #304]	; (80006f0 <MX_GPIO_Init+0x218>)
 80005be:	f001 f983 	bl	80018c8 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005c2:	2308      	movs	r3, #8
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	4619      	mov	r1, r3
 80005d8:	4842      	ldr	r0, [pc, #264]	; (80006e4 <MX_GPIO_Init+0x20c>)
 80005da:	f000 ffdb 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005de:	2301      	movs	r3, #1
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	483c      	ldr	r0, [pc, #240]	; (80006e8 <MX_GPIO_Init+0x210>)
 80005f6:	f000 ffcd 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005fa:	2308      	movs	r3, #8
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800060a:	2305      	movs	r3, #5
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	4834      	ldr	r0, [pc, #208]	; (80006e8 <MX_GPIO_Init+0x210>)
 8000616:	f000 ffbd 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061a:	2301      	movs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800061e:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <MX_GPIO_Init+0x21c>)
 8000620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4619      	mov	r1, r3
 800062c:	4832      	ldr	r0, [pc, #200]	; (80006f8 <MX_GPIO_Init+0x220>)
 800062e:	f000 ffb1 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000632:	2304      	movs	r3, #4
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	4829      	ldr	r0, [pc, #164]	; (80006ec <MX_GPIO_Init+0x214>)
 8000646:	f000 ffa5 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800064a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800065c:	2305      	movs	r3, #5
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4821      	ldr	r0, [pc, #132]	; (80006ec <MX_GPIO_Init+0x214>)
 8000668:	f000 ff94 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800066c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	4819      	ldr	r0, [pc, #100]	; (80006ec <MX_GPIO_Init+0x214>)
 8000686:	f000 ff85 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800068a:	f64f 7310 	movw	r3, #65296	; 0xff10
 800068e:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	4813      	ldr	r0, [pc, #76]	; (80006f0 <MX_GPIO_Init+0x218>)
 80006a4:	f000 ff76 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006a8:	2320      	movs	r3, #32
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_GPIO_Init+0x218>)
 80006bc:	f000 ff6a 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_GPIO_Init+0x21c>)
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_GPIO_Init+0x20c>)
 80006d4:	f000 ff5e 	bl	8001594 <HAL_GPIO_Init>

}
 80006d8:	bf00      	nop
 80006da:	3730      	adds	r7, #48	; 0x30
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40020800 	.word	0x40020800
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40020c00 	.word	0x40020c00
 80006f4:	10120000 	.word	0x10120000
 80006f8:	40020000 	.word	0x40020000

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2C1_Init+0x50>)
 800073a:	f002 fde5 	bl	8003308 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 fa2e 	bl	8000ba4 <Error_Handler>
  }

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000c0 	.word	0x200000c0
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_I2C_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12c      	bne.n	80007d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <HAL_I2C_MspInit+0x88>)
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_I2C_MspInit+0x88>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_I2C_MspInit+0x88>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000796:	f44f 7310 	mov.w	r3, #576	; 0x240
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079c:	2312      	movs	r3, #18
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	; (80007e4 <HAL_I2C_MspInit+0x8c>)
 80007b4:	f000 feee 	bl	8001594 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_I2C_MspInit+0x88>)
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_I2C_MspInit+0x88>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_I2C_MspInit+0x88>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400

080007e8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_I2S3_Init+0x54>)
 80007ee:	4a14      	ldr	r2, [pc, #80]	; (8000840 <MX_I2S3_Init+0x58>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_I2S3_Init+0x54>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_I2S3_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_I2S3_Init+0x54>)
 8000808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_I2S3_Init+0x54>)
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <MX_I2S3_Init+0x5c>)
 8000812:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_I2S3_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_I2S3_Init+0x54>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_I2S3_Init+0x54>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_I2S3_Init+0x54>)
 8000828:	f002 fea6 	bl	8003578 <HAL_I2S_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000832:	f000 f9b7 	bl	8000ba4 <Error_Handler>
  }

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000114 	.word	0x20000114
 8000840:	40003c00 	.word	0x40003c00
 8000844:	00017700 	.word	0x00017700

08000848 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <HAL_I2S_MspInit+0xc0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d14a      	bne.n	8000900 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4a27      	ldr	r2, [pc, #156]	; (800090c <HAL_I2S_MspInit+0xc4>)
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <HAL_I2S_MspInit+0xc4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <HAL_I2S_MspInit+0xc4>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4a20      	ldr	r2, [pc, #128]	; (800090c <HAL_I2S_MspInit+0xc4>)
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <HAL_I2S_MspInit+0xc4>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <HAL_I2S_MspInit+0xc4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <HAL_I2S_MspInit+0xc4>)
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_I2S_MspInit+0xc4>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_I2S_MspInit+0xc4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008be:	2310      	movs	r3, #16
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ce:	2306      	movs	r3, #6
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <HAL_I2S_MspInit+0xc8>)
 80008da:	f000 fe5b 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008de:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f0:	2306      	movs	r3, #6
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <HAL_I2S_MspInit+0xcc>)
 80008fc:	f000 fe4a 	bl	8001594 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40003c00 	.word	0x40003c00
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000
 8000914:	40020800 	.word	0x40020800

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 fc95 	bl	800124c <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t a=1;
 8000922:	2301      	movs	r3, #1
 8000924:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f8bb 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f7ff fdd5 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800092e:	f7ff fee5 	bl	80006fc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000932:	f7ff ff59 	bl	80007e8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000936:	f000 f93d 	bl	8000bb4 <MX_SPI1_Init>
  MX_TIM3_Init();
 800093a:	f000 fa5b 	bl	8000df4 <MX_TIM3_Init>
  MX_TIM12_Init();
 800093e:	f000 fae9 	bl	8000f14 <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8000942:	f000 fc11 	bl	8001168 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8000946:	f008 f943 	bl	8008bd0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800094a:	2100      	movs	r1, #0
 800094c:	484d      	ldr	r0, [pc, #308]	; (8000a84 <main+0x16c>)
 800094e:	f004 f915 	bl	8004b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000952:	2104      	movs	r1, #4
 8000954:	484b      	ldr	r0, [pc, #300]	; (8000a84 <main+0x16c>)
 8000956:	f004 f911 	bl	8004b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800095a:	2108      	movs	r1, #8
 800095c:	4849      	ldr	r0, [pc, #292]	; (8000a84 <main+0x16c>)
 800095e:	f004 f90d 	bl	8004b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000962:	2100      	movs	r1, #0
 8000964:	4848      	ldr	r0, [pc, #288]	; (8000a88 <main+0x170>)
 8000966:	f004 f909 	bl	8004b7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800096a:	2104      	movs	r1, #4
 800096c:	4846      	ldr	r0, [pc, #280]	; (8000a88 <main+0x170>)
 800096e:	f004 f905 	bl	8004b7c <HAL_TIM_PWM_Start>

  uint8_t b = 17;
 8000972:	2311      	movs	r3, #17
 8000974:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000976:	f008 f951 	bl	8008c1c <MX_USB_HOST_Process>
    TIM3->CCR2 = 430;
    TIM3->CCR3 = 350;
    TIM12->CCR1 = 450;
    TIM12->CCR2 = 460;*/
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET); //ENA1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); //ENA2
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000980:	4842      	ldr	r0, [pc, #264]	; (8000a8c <main+0x174>)
 8000982:	f000 ffa1 	bl	80018c8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET); //FORWARD_1
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098c:	4840      	ldr	r0, [pc, #256]	; (8000a90 <main+0x178>)
 800098e:	f000 ff9b 	bl	80018c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET); //FORWARD_1
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000998:	483d      	ldr	r0, [pc, #244]	; (8000a90 <main+0x178>)
 800099a:	f000 ff95 	bl	80018c8 <HAL_GPIO_WritePin>
           TIM3->CCR3 = 440;
           TIM12->CCR1 = 500;
           TIM12->CCR2 = 460;

           */
    if (HAL_UART_Receive(&huart2, &a, 1, 100) == HAL_OK){
 800099e:	1db9      	adds	r1, r7, #6
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	2201      	movs	r2, #1
 80009a4:	483b      	ldr	r0, [pc, #236]	; (8000a94 <main+0x17c>)
 80009a6:	f004 fe7e 	bl	80056a6 <HAL_UART_Receive>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e2      	bne.n	8000976 <main+0x5e>
    	//HAL_UART_Transmit(&huart2, &b, 1, 100);

    	if(a=='8'){
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	2b38      	cmp	r3, #56	; 0x38
 80009b4:	d112      	bne.n	80009dc <main+0xc4>
    		 TIM3->CCR1 = 50;
 80009b6:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <main+0x180>)
 80009b8:	2232      	movs	r2, #50	; 0x32
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34
    		 TIM3->CCR2 = 430;
 80009bc:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <main+0x180>)
 80009be:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38
    		 TIM3->CCR3 = 350;
 80009c4:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <main+0x180>)
 80009c6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80009ca:	63da      	str	r2, [r3, #60]	; 0x3c
    		 TIM12->CCR1 = 460;
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <main+0x184>)
 80009ce:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
    		 TIM12->CCR2 = 460;
 80009d4:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <main+0x184>)
 80009d6:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80009da:	639a      	str	r2, [r3, #56]	; 0x38
    		}
    	if(a=='4'){
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	2b34      	cmp	r3, #52	; 0x34
 80009e0:	d112      	bne.n	8000a08 <main+0xf0>
    	    TIM3->CCR1 = 50;
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <main+0x180>)
 80009e4:	2232      	movs	r2, #50	; 0x32
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
    	    TIM3->CCR2 = 400;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <main+0x180>)
 80009ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80009ee:	639a      	str	r2, [r3, #56]	; 0x38
    	    TIM3->CCR3 = 440;
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <main+0x180>)
 80009f2:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80009f6:	63da      	str	r2, [r3, #60]	; 0x3c
    	    TIM12->CCR1 = 450;
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <main+0x184>)
 80009fa:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34
    	    TIM12->CCR2 = 460;
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <main+0x184>)
 8000a02:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
    	}
    	if(a=='1'){
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	2b31      	cmp	r3, #49	; 0x31
 8000a0c:	d103      	bne.n	8000a16 <main+0xfe>
    		TIM12->CCR2 = 360;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <main+0x184>)
 8000a10:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000a14:	639a      	str	r2, [r3, #56]	; 0x38
    		//TIM12->CCR1 = 420;
    	}
    	if(a=='2'){
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	2b32      	cmp	r3, #50	; 0x32
 8000a1a:	d103      	bne.n	8000a24 <main+0x10c>
    		TIM12->CCR2 = 400;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <main+0x184>)
 8000a1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a22:	639a      	str	r2, [r3, #56]	; 0x38
    	}
    	if(a=='3'){
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	2b33      	cmp	r3, #51	; 0x33
 8000a28:	d103      	bne.n	8000a32 <main+0x11a>
    		TIM12->CCR2 = 500;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <main+0x184>)
 8000a2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a30:	639a      	str	r2, [r3, #56]	; 0x38
    	}
    	if(a=='7'){
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	2b37      	cmp	r3, #55	; 0x37
 8000a36:	d105      	bne.n	8000a44 <main+0x12c>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3e:	4813      	ldr	r0, [pc, #76]	; (8000a8c <main+0x174>)
 8000a40:	f000 ff42 	bl	80018c8 <HAL_GPIO_WritePin>
  	    }

    	if(a=='6'){
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	2b36      	cmp	r3, #54	; 0x36
 8000a48:	d105      	bne.n	8000a56 <main+0x13e>
    	    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a50:	480e      	ldr	r0, [pc, #56]	; (8000a8c <main+0x174>)
 8000a52:	f000 ff39 	bl	80018c8 <HAL_GPIO_WritePin>
    	}
    	if(a=='5'){
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	2b35      	cmp	r3, #53	; 0x35
 8000a5a:	d18c      	bne.n	8000976 <main+0x5e>
    				TIM3->CCR1 = 300;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <main+0x180>)
 8000a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
    	   	    	TIM3->CCR2 = 100;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <main+0x180>)
 8000a66:	2264      	movs	r2, #100	; 0x64
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38
    	    	    TIM3->CCR3 = 100;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <main+0x180>)
 8000a6c:	2264      	movs	r2, #100	; 0x64
 8000a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    	    	    TIM12->CCR1 = 420;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <main+0x184>)
 8000a72:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
    	    	    TIM12->CCR2 = 460;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <main+0x184>)
 8000a7a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8000a7e:	639a      	str	r2, [r3, #56]	; 0x38
    MX_USB_HOST_Process();
 8000a80:	e779      	b.n	8000976 <main+0x5e>
 8000a82:	bf00      	nop
 8000a84:	200001b4 	.word	0x200001b4
 8000a88:	200001f4 	.word	0x200001f4
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	20000234 	.word	0x20000234
 8000a98:	40000400 	.word	0x40000400
 8000a9c:	40001800 	.word	0x40001800

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b098      	sub	sp, #96	; 0x60
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aaa:	2230      	movs	r2, #48	; 0x30
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f008 fbfa 	bl	80092a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <SystemClock_Config+0xfc>)
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <SystemClock_Config+0xfc>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <SystemClock_Config+0xfc>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4a2b      	ldr	r2, [pc, #172]	; (8000ba0 <SystemClock_Config+0x100>)
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <SystemClock_Config+0x100>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <SystemClock_Config+0x100>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b22:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b26:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b34:	4618      	mov	r0, r3
 8000b36:	f003 f9bd 	bl	8003eb4 <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b40:	f000 f830 	bl	8000ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	230f      	movs	r3, #15
 8000b46:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2105      	movs	r1, #5
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 fc16 	bl	8004394 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b6e:	f000 f819 	bl	8000ba4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b72:	2301      	movs	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b76:	23c0      	movs	r3, #192	; 0xc0
 8000b78:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 fdf8 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b8e:	f000 f809 	bl	8000ba4 <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	3760      	adds	r7, #96	; 0x60
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40007000 	.word	0x40007000

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI1_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c06:	f003 fef5 	bl	80049f4 <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c10:	f7ff ffc8 	bl	8000ba4 <Error_Handler>
  }

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000015c 	.word	0x2000015c
 8000c1c:	40013000 	.word	0x40013000

08000c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_SPI_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12b      	bne.n	8000c9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c7a:	23e0      	movs	r3, #224	; 0xe0
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_SPI_MspInit+0x8c>)
 8000c96:	f000 fc7d 	bl	8001594 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40013000 	.word	0x40013000
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cee:	2007      	movs	r0, #7
 8000cf0:	f000 fc0e 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 facc 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <OTG_FS_IRQHandler+0x10>)
 8000d62:	f001 f859 	bl	8001e18 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000650 	.word	0x20000650

08000d70 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x50>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x16>
		heap_end = &end;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <_sbrk+0x50>)
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <_sbrk+0x54>)
 8000d84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <_sbrk+0x50>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <_sbrk+0x50>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	466a      	mov	r2, sp
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d907      	bls.n	8000daa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000d9a:	f008 fa4b 	bl	8009234 <__errno>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	230c      	movs	r3, #12
 8000da2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	e006      	b.n	8000db8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <_sbrk+0x50>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a03      	ldr	r2, [pc, #12]	; (8000dc0 <_sbrk+0x50>)
 8000db4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200000ac 	.word	0x200000ac
 8000dc4:	20000918 	.word	0x20000918

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <SystemInit+0x28>)
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <SystemInit+0x28>)
 8000dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SystemInit+0x28>)
 8000dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de2:	609a      	str	r2, [r3, #8]
#endif
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000e24:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e26:	4a3a      	ldr	r2, [pc, #232]	; (8000f10 <MX_TIM3_Init+0x11c>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 335;
 8000e2a:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e2c:	f240 124f 	movw	r2, #335	; 0x14f
 8000e30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000e38:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e4c:	482f      	ldr	r0, [pc, #188]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e4e:	f003 fe34 	bl	8004aba <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e58:	f7ff fea4 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4828      	ldr	r0, [pc, #160]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e6a:	f003 ff8b 	bl	8004d84 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e74:	f7ff fe96 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e78:	4824      	ldr	r0, [pc, #144]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e7a:	f003 fe49 	bl	8004b10 <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e84:	f7ff fe8e 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4619      	mov	r1, r3
 8000e96:	481d      	ldr	r0, [pc, #116]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000e98:	f004 fb3c 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ea2:	f7ff fe7f 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	; 0x60
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 8000eaa:	23fa      	movs	r3, #250	; 0xfa
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000ebe:	f003 fe9b 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ec8:	f7ff fe6c 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 8000ecc:	2364      	movs	r3, #100	; 0x64
 8000ece:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000ed8:	f003 fe8e 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000ee2:	f7ff fe5f 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2208      	movs	r2, #8
 8000eea:	4619      	mov	r1, r3
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000eee:	f003 fe83 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8000ef8:	f7ff fe54 	bl	8000ba4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM3_Init+0x118>)
 8000efe:	f000 f8b3 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000f02:	bf00      	nop
 8000f04:	3738      	adds	r7, #56	; 0x38
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001b4 	.word	0x200001b4
 8000f10:	40000400 	.word	0x40000400

08000f14 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000f3c:	4a2d      	ldr	r2, [pc, #180]	; (8000ff4 <MX_TIM12_Init+0xe0>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 335;
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000f42:	f240 124f 	movw	r2, #335	; 0x14f
 8000f46:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9999;
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000f50:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f54:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f62:	4823      	ldr	r0, [pc, #140]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000f64:	f003 fda9 	bl	8004aba <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8000f6e:	f7ff fe19 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481c      	ldr	r0, [pc, #112]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000f80:	f003 ff00 	bl	8004d84 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8000f8a:	f7ff fe0b 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000f90:	f003 fdbe 	bl	8004b10 <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000f9a:	f7ff fe03 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9e:	2360      	movs	r3, #96	; 0x60
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 420;
 8000fa2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8000fa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000fb8:	f003 fe1e 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8000fc2:	f7ff fdef 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.Pulse = 460;
 8000fc6:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8000fca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2204      	movs	r2, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000fd4:	f003 fe10 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM12_Init+0xce>
  {
    Error_Handler();
 8000fde:	f7ff fde1 	bl	8000ba4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <MX_TIM12_Init+0xdc>)
 8000fe4:	f000 f840 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000fe8:	bf00      	nop
 8000fea:	3730      	adds	r7, #48	; 0x30
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200001f4 	.word	0x200001f4
 8000ff4:	40001800 	.word	0x40001800

08000ff8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_TIM_Base_MspInit+0x64>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d10e      	bne.n	8001028 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001026:	e012      	b.n	800104e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM12)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_TIM_Base_MspInit+0x6c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10d      	bne.n	800104e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40000400 	.word	0x40000400
 8001060:	40023800 	.word	0x40023800
 8001064:	40001800 	.word	0x40001800

08001068 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a33      	ldr	r2, [pc, #204]	; (8001154 <HAL_TIM_MspPostInit+0xec>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d13c      	bne.n	8001104 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4a32      	ldr	r2, [pc, #200]	; (8001158 <HAL_TIM_MspPostInit+0xf0>)
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <HAL_TIM_MspPostInit+0xf0>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_TIM_MspPostInit+0xf0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4a2b      	ldr	r2, [pc, #172]	; (8001158 <HAL_TIM_MspPostInit+0xf0>)
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_TIM_MspPostInit+0xf0>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_TIM_MspPostInit+0xf0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80010c2:	2321      	movs	r3, #33	; 0x21
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010d2:	2302      	movs	r3, #2
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	481f      	ldr	r0, [pc, #124]	; (800115c <HAL_TIM_MspPostInit+0xf4>)
 80010de:	f000 fa59 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010f2:	2302      	movs	r3, #2
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <HAL_TIM_MspPostInit+0xf8>)
 80010fe:	f000 fa49 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001102:	e023      	b.n	800114c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM12)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <HAL_TIM_MspPostInit+0xfc>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d11e      	bne.n	800114c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_TIM_MspPostInit+0xf0>)
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_TIM_MspPostInit+0xf0>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_TIM_MspPostInit+0xf0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800112a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800113c:	2309      	movs	r3, #9
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_TIM_MspPostInit+0xf4>)
 8001148:	f000 fa24 	bl	8001594 <HAL_GPIO_Init>
}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40000400 	.word	0x40000400
 8001158:	40023800 	.word	0x40023800
 800115c:	40020400 	.word	0x40020400
 8001160:	40020800 	.word	0x40020800
 8001164:	40001800 	.word	0x40001800

08001168 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_USART2_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f004 fa34 	bl	800560c <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f7ff fcfb 	bl	8000ba4 <Error_Handler>
  }

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000234 	.word	0x20000234
 80011b8:	40004400 	.word	0x40004400

080011bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x84>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12b      	bne.n	8001236 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_UART_MspInit+0x88>)
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_UART_MspInit+0x88>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_UART_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001226:	2307      	movs	r3, #7
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_UART_MspInit+0x8c>)
 8001232:	f000 f9af 	bl	8001594 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40004400 	.word	0x40004400
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_Init+0x40>)
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_Init+0x40>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_Init+0x40>)
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_Init+0x40>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_Init+0x40>)
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x40>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f94b 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fd16 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f963 	bl	800157a <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 f92b 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	20000274 	.word	0x20000274

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000274 	.word	0x20000274

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_Delay+0x40>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad2      	subs	r2, r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3f7      	bcc.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000008 	.word	0x20000008

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	4909      	ldr	r1, [pc, #36]	; (8001410 <__NVIC_EnableIRQ+0x38>)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	095b      	lsrs	r3, r3, #5
 80013f2:	79fa      	ldrb	r2, [r7, #7]
 80013f4:	f002 021f 	and.w	r2, r2, #31
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	490d      	ldr	r1, [pc, #52]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	4909      	ldr	r1, [pc, #36]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	2201      	movs	r2, #1
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	401a      	ands	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ae:	2101      	movs	r1, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	1e59      	subs	r1, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff90 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff2b 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff40 	bl	80013bc <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff90 	bl	8001468 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5f 	bl	8001414 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff33 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa2 	bl	80014cc <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e16b      	b.n	8001888 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	f040 815a 	bne.w	8001882 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d00b      	beq.n	80015ee <HAL_GPIO_Init+0x5a>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e2:	2b11      	cmp	r3, #17
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b12      	cmp	r3, #18
 80015ec:	d130      	bne.n	8001650 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001624:	2201      	movs	r2, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 0201 	and.w	r2, r3, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0xfc>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b12      	cmp	r3, #18
 800168e:	d123      	bne.n	80016d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	08da      	lsrs	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3208      	adds	r2, #8
 8001698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	08da      	lsrs	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3208      	adds	r2, #8
 80016d2:	69b9      	ldr	r1, [r7, #24]
 80016d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80b4 	beq.w	8001882 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4a5f      	ldr	r2, [pc, #380]	; (800189c <HAL_GPIO_Init+0x308>)
 8001720:	4b5e      	ldr	r3, [pc, #376]	; (800189c <HAL_GPIO_Init+0x308>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <HAL_GPIO_Init+0x308>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001736:	4a5a      	ldr	r2, [pc, #360]	; (80018a0 <HAL_GPIO_Init+0x30c>)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a51      	ldr	r2, [pc, #324]	; (80018a4 <HAL_GPIO_Init+0x310>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d02b      	beq.n	80017ba <HAL_GPIO_Init+0x226>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a50      	ldr	r2, [pc, #320]	; (80018a8 <HAL_GPIO_Init+0x314>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d025      	beq.n	80017b6 <HAL_GPIO_Init+0x222>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4f      	ldr	r2, [pc, #316]	; (80018ac <HAL_GPIO_Init+0x318>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01f      	beq.n	80017b2 <HAL_GPIO_Init+0x21e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4e      	ldr	r2, [pc, #312]	; (80018b0 <HAL_GPIO_Init+0x31c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <HAL_GPIO_Init+0x21a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <HAL_GPIO_Init+0x320>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0x216>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4c      	ldr	r2, [pc, #304]	; (80018b8 <HAL_GPIO_Init+0x324>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x212>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4b      	ldr	r2, [pc, #300]	; (80018bc <HAL_GPIO_Init+0x328>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x20e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4a      	ldr	r2, [pc, #296]	; (80018c0 <HAL_GPIO_Init+0x32c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x20a>
 800179a:	2307      	movs	r3, #7
 800179c:	e00e      	b.n	80017bc <HAL_GPIO_Init+0x228>
 800179e:	2308      	movs	r3, #8
 80017a0:	e00c      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00a      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e008      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017ba:	2300      	movs	r3, #0
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f002 0203 	and.w	r2, r2, #3
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017cc:	4934      	ldr	r1, [pc, #208]	; (80018a0 <HAL_GPIO_Init+0x30c>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017da:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <HAL_GPIO_Init+0x330>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017fe:	4a31      	ldr	r2, [pc, #196]	; (80018c4 <HAL_GPIO_Init+0x330>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_GPIO_Init+0x330>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001828:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <HAL_GPIO_Init+0x330>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_GPIO_Init+0x330>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <HAL_GPIO_Init+0x330>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_GPIO_Init+0x330>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800187c:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <HAL_GPIO_Init+0x330>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3301      	adds	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	f67f ae90 	bls.w	80015b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001890:	bf00      	nop
 8001892:	3724      	adds	r7, #36	; 0x24
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40023800 	.word	0x40023800
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40021400 	.word	0x40021400
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40021c00 	.word	0x40021c00
 80018c4:	40013c00 	.word	0x40013c00

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fc:	b08f      	sub	sp, #60	; 0x3c
 80018fe:	af0a      	add	r7, sp, #40	; 0x28
 8001900:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e054      	b.n	80019b6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f007 f9b0 	bl	8008c8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2203      	movs	r2, #3
 8001930:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f004 fb4c 	bl	8005fe8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	687e      	ldr	r6, [r7, #4]
 8001958:	466d      	mov	r5, sp
 800195a:	f106 0410 	add.w	r4, r6, #16
 800195e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196a:	e885 0003 	stmia.w	r5, {r0, r1}
 800196e:	1d33      	adds	r3, r6, #4
 8001970:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001972:	6838      	ldr	r0, [r7, #0]
 8001974:	f004 fac6 	bl	8005f04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f004 fb43 	bl	800600a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	687e      	ldr	r6, [r7, #4]
 800198c:	466d      	mov	r5, sp
 800198e:	f106 0410 	add.w	r4, r6, #16
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800199e:	e885 0003 	stmia.w	r5, {r0, r1}
 80019a2:	1d33      	adds	r3, r6, #4
 80019a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a6:	6838      	ldr	r0, [r7, #0]
 80019a8:	f004 fc56 	bl	8006258 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019be <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019be:	b590      	push	{r4, r7, lr}
 80019c0:	b089      	sub	sp, #36	; 0x24
 80019c2:	af04      	add	r7, sp, #16
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	4608      	mov	r0, r1
 80019c8:	4611      	mov	r1, r2
 80019ca:	461a      	mov	r2, r3
 80019cc:	4603      	mov	r3, r0
 80019ce:	70fb      	strb	r3, [r7, #3]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70bb      	strb	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_HCD_HC_Init+0x28>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e07f      	b.n	8001ae6 <HAL_HCD_HC_Init+0x128>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	333d      	adds	r3, #61	; 0x3d
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3338      	adds	r3, #56	; 0x38
 8001a12:	787a      	ldrb	r2, [r7, #1]
 8001a14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	3340      	adds	r3, #64	; 0x40
 8001a26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a28:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	3339      	adds	r3, #57	; 0x39
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	333f      	adds	r3, #63	; 0x3f
 8001a4e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	78bb      	ldrb	r3, [r7, #2]
 8001a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a5c:	b2d8      	uxtb	r0, r3
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	333a      	adds	r3, #58	; 0x3a
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da0a      	bge.n	8001a8e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	333b      	adds	r3, #59	; 0x3b
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	e009      	b.n	8001aa2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	333b      	adds	r3, #59	; 0x3b
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	440b      	add	r3, r1
 8001ab0:	333c      	adds	r3, #60	; 0x3c
 8001ab2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ab6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	787c      	ldrb	r4, [r7, #1]
 8001abe:	78ba      	ldrb	r2, [r7, #2]
 8001ac0:	78f9      	ldrb	r1, [r7, #3]
 8001ac2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	4623      	mov	r3, r4
 8001ad4:	f004 fd4a 	bl	800656c <USB_HC_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd90      	pop	{r4, r7, pc}

08001aee <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_HCD_HC_Halt+0x1e>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e00f      	b.n	8001b2c <HAL_HCD_HC_Halt+0x3e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	78fa      	ldrb	r2, [r7, #3]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f004 ff92 	bl	8006a46 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	4608      	mov	r0, r1
 8001b3e:	4611      	mov	r1, r2
 8001b40:	461a      	mov	r2, r3
 8001b42:	4603      	mov	r3, r0
 8001b44:	70fb      	strb	r3, [r7, #3]
 8001b46:	460b      	mov	r3, r1
 8001b48:	70bb      	strb	r3, [r7, #2]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	333b      	adds	r3, #59	; 0x3b
 8001b5e:	78ba      	ldrb	r2, [r7, #2]
 8001b60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	333f      	adds	r3, #63	; 0x3f
 8001b72:	787a      	ldrb	r2, [r7, #1]
 8001b74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b76:	7c3b      	ldrb	r3, [r7, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d114      	bne.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	3342      	adds	r3, #66	; 0x42
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	333d      	adds	r3, #61	; 0x3d
 8001ba0:	7f3a      	ldrb	r2, [r7, #28]
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	e009      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3342      	adds	r3, #66	; 0x42
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001bba:	787b      	ldrb	r3, [r7, #1]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	f200 80d6 	bhi.w	8001d6e <HAL_HCD_HC_SubmitRequest+0x23a>
 8001bc2:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc8:	08001bd9 	.word	0x08001bd9
 8001bcc:	08001d59 	.word	0x08001d59
 8001bd0:	08001c45 	.word	0x08001c45
 8001bd4:	08001ccf 	.word	0x08001ccf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001bd8:	7c3b      	ldrb	r3, [r7, #16]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	f040 80c9 	bne.w	8001d72 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001be0:	78bb      	ldrb	r3, [r7, #2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 80c5 	bne.w	8001d72 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001be8:	8b3b      	ldrh	r3, [r7, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3351      	adds	r3, #81	; 0x51
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	3351      	adds	r3, #81	; 0x51
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10a      	bne.n	8001c2e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	3342      	adds	r3, #66	; 0x42
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c2c:	e0a1      	b.n	8001d72 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3342      	adds	r3, #66	; 0x42
 8001c3e:	2202      	movs	r2, #2
 8001c40:	701a      	strb	r2, [r3, #0]
      break;
 8001c42:	e096      	b.n	8001d72 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c44:	78bb      	ldrb	r3, [r7, #2]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d120      	bne.n	8001c8c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	3351      	adds	r3, #81	; 0x51
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10a      	bne.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3342      	adds	r3, #66	; 0x42
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c74:	e07e      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	3342      	adds	r3, #66	; 0x42
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
      break;
 8001c8a:	e073      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3350      	adds	r3, #80	; 0x50
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3342      	adds	r3, #66	; 0x42
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
      break;
 8001cb6:	e05d      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cb8:	78fa      	ldrb	r2, [r7, #3]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3342      	adds	r3, #66	; 0x42
 8001cc8:	2202      	movs	r2, #2
 8001cca:	701a      	strb	r2, [r3, #0]
      break;
 8001ccc:	e052      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cce:	78bb      	ldrb	r3, [r7, #2]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d120      	bne.n	8001d16 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3351      	adds	r3, #81	; 0x51
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10a      	bne.n	8001d00 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3342      	adds	r3, #66	; 0x42
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cfe:	e039      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3342      	adds	r3, #66	; 0x42
 8001d10:	2202      	movs	r2, #2
 8001d12:	701a      	strb	r2, [r3, #0]
      break;
 8001d14:	e02e      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	3350      	adds	r3, #80	; 0x50
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10a      	bne.n	8001d42 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	3342      	adds	r3, #66	; 0x42
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
      break;
 8001d40:	e018      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	3342      	adds	r3, #66	; 0x42
 8001d52:	2202      	movs	r2, #2
 8001d54:	701a      	strb	r2, [r3, #0]
      break;
 8001d56:	e00d      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	440b      	add	r3, r1
 8001d66:	3342      	adds	r3, #66	; 0x42
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
      break;
 8001d6c:	e002      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001d6e:	bf00      	nop
 8001d70:	e000      	b.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001d72:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	3344      	adds	r3, #68	; 0x44
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	8b39      	ldrh	r1, [r7, #24]
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4403      	add	r3, r0
 8001d98:	3348      	adds	r3, #72	; 0x48
 8001d9a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	335c      	adds	r3, #92	; 0x5c
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	334c      	adds	r3, #76	; 0x4c
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3339      	adds	r3, #57	; 0x39
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	335d      	adds	r3, #93	; 0x5d
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	3338      	adds	r3, #56	; 0x38
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	18d1      	adds	r1, r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	f004 fcc2 	bl	8006790 <USB_HC_StartXfer>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop

08001e18 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 f9cf 	bl	80061d2 <USB_GetMode>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	f040 80ef 	bne.w	800201a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 f9b3 	bl	80061ac <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80e5 	beq.w	8002018 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 f9aa 	bl	80061ac <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e62:	d104      	bne.n	8001e6e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 f99a 	bl	80061ac <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e82:	d104      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 f98a 	bl	80061ac <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ea2:	d104      	bne.n	8001eae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 f97a 	bl	80061ac <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d103      	bne.n	8001eca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 f96c 	bl	80061ac <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ede:	d115      	bne.n	8001f0c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ee8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f006 ff44 	bl	8008d88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 fa64 	bl	80063d4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 f94b 	bl	80061ac <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f20:	d102      	bne.n	8001f28 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f001 f97c 	bl	8003220 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 f93d 	bl	80061ac <USB_ReadInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d106      	bne.n	8001f4a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f006 ff07 	bl	8008d50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2208      	movs	r2, #8
 8001f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 f92c 	bl	80061ac <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f5e:	d138      	bne.n	8001fd2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fd5d 	bl	8006a24 <USB_HC_ReadInterrupt>
 8001f6a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e025      	b.n	8001fbe <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d018      	beq.n	8001fb8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f9c:	d106      	bne.n	8001fac <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f8cf 	bl	8002148 <HCD_HC_IN_IRQHandler>
 8001faa:	e005      	b.n	8001fb8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fd08 	bl	80029c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d8d4      	bhi.n	8001f72 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 f8e8 	bl	80061ac <USB_ReadInterrupts>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d101      	bne.n	8001fea <HAL_HCD_IRQHandler+0x1d2>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_HCD_IRQHandler+0x1d4>
 8001fea:	2300      	movs	r3, #0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d014      	beq.n	800201a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	6992      	ldr	r2, [r2, #24]
 8001ffa:	f022 0210 	bic.w	r2, r2, #16
 8001ffe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f001 f861 	bl	80030c8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	6992      	ldr	r2, [r2, #24]
 8002010:	f042 0210 	orr.w	r2, r2, #16
 8002014:	619a      	str	r2, [r3, #24]
 8002016:	e000      	b.n	800201a <HAL_HCD_IRQHandler+0x202>
      return;
 8002018:	bf00      	nop
    }
  }
}
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_HCD_Start+0x16>
 8002032:	2302      	movs	r3, #2
 8002034:	e013      	b.n	800205e <HAL_HCD_Start+0x3e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 ffbf 	bl	8005fc6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	4618      	mov	r0, r3
 8002050:	f004 fa28 	bl	80064a4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_HCD_Stop+0x16>
 8002078:	2302      	movs	r3, #2
 800207a:	e00d      	b.n	8002098 <HAL_HCD_Stop+0x32>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fe21 	bl	8006cd0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f004 f9cd 	bl	800644c <USB_ResetPort>
 80020b2:	4603      	mov	r3, r0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	335c      	adds	r3, #92	; 0x5c
 80020d8:	781b      	ldrb	r3, [r3, #0]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	334c      	adds	r3, #76	; 0x4c
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fa13 	bl	8006548 <USB_GetCurrentFrame>
 8002122:	4603      	mov	r3, r0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f004 f9ee 	bl	800651a <USB_GetHostSpeed>
 800213e:	4603      	mov	r3, r0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b04      	cmp	r3, #4
 8002176:	d11a      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	2304      	movs	r3, #4
 8002188:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	4619      	mov	r1, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	60cb      	str	r3, [r1, #12]
 80021ac:	e0d1      	b.n	8002352 <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c4:	d12d      	bne.n	8002222 <HCD_HC_IN_IRQHandler+0xda>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	461a      	mov	r2, r3
 80021d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	335d      	adds	r3, #93	; 0x5d
 80021ea:	2207      	movs	r2, #7
 80021ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	4619      	mov	r1, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fc13 	bl	8006a46 <USB_HC_Halt>
 8002220:	e097      	b.n	8002352 <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b20      	cmp	r3, #32
 8002236:	d109      	bne.n	800224c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	461a      	mov	r2, r3
 8002246:	2320      	movs	r3, #32
 8002248:	6093      	str	r3, [r2, #8]
 800224a:	e082      	b.n	8002352 <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b08      	cmp	r3, #8
 8002260:	d135      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x186>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	4619      	mov	r1, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	335d      	adds	r3, #93	; 0x5d
 8002294:	2205      	movs	r2, #5
 8002296:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	461a      	mov	r2, r3
 80022a6:	2310      	movs	r3, #16
 80022a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	461a      	mov	r2, r3
 80022b8:	2308      	movs	r3, #8
 80022ba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 fbbd 	bl	8006a46 <USB_HC_Halt>
 80022cc:	e041      	b.n	8002352 <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e4:	d135      	bne.n	8002352 <HCD_HC_IN_IRQHandler+0x20a>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	4619      	mov	r1, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f004 fb97 	bl	8006a46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	2310      	movs	r3, #16
 8002328:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	335d      	adds	r3, #93	; 0x5d
 800233a:	2208      	movs	r2, #8
 800233c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002350:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002368:	d123      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x26a>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	4619      	mov	r1, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f004 fb55 	bl	8006a46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023b0:	e306      	b.n	80029c0 <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 80ff 	bne.w	80025c8 <HCD_HC_IN_IRQHandler+0x480>
    if (hhcd->Init.dma_enable != 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01b      	beq.n	800240a <HCD_HC_IN_IRQHandler+0x2c2>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	3348      	adds	r3, #72	; 0x48
 80023e2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	0159      	lsls	r1, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	440b      	add	r3, r1
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80023f6:	1ad1      	subs	r1, r2, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4403      	add	r3, r0
 8002406:	334c      	adds	r3, #76	; 0x4c
 8002408:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	335d      	adds	r3, #93	; 0x5d
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	3358      	adds	r3, #88	; 0x58
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	2301      	movs	r3, #1
 8002442:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	333f      	adds	r3, #63	; 0x3f
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HCD_HC_IN_IRQHandler+0x328>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	333f      	adds	r3, #63	; 0x3f
 800246a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800246c:	2b02      	cmp	r3, #2
 800246e:	d122      	bne.n	80024b6 <HCD_HC_IN_IRQHandler+0x36e>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	4619      	mov	r1, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f004 fad2 	bl	8006a46 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	461a      	mov	r2, r3
 80024b0:	2310      	movs	r3, #16
 80024b2:	6093      	str	r3, [r2, #8]
 80024b4:	e071      	b.n	800259a <HCD_HC_IN_IRQHandler+0x452>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	333f      	adds	r3, #63	; 0x3f
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d12b      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0x3dc>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	4619      	mov	r1, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024ec:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	335c      	adds	r3, #92	; 0x5c
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	b2d8      	uxtb	r0, r3
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	335c      	adds	r3, #92	; 0x5c
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4601      	mov	r1, r0
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f006 fc41 	bl	8008da4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002522:	e03a      	b.n	800259a <HCD_HC_IN_IRQHandler+0x452>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	333f      	adds	r3, #63	; 0x3f
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d12f      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x452>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	335c      	adds	r3, #92	; 0x5c
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	3350      	adds	r3, #80	; 0x50
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	f083 0301 	eor.w	r3, r3, #1
 8002564:	b2d8      	uxtb	r0, r3
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	440b      	add	r3, r1
 8002574:	3350      	adds	r3, #80	; 0x50
 8002576:	4602      	mov	r2, r0
 8002578:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	b2d8      	uxtb	r0, r3
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	335c      	adds	r3, #92	; 0x5c
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4601      	mov	r1, r0
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f006 fc05 	bl	8008da4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	3350      	adds	r3, #80	; 0x50
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2d8      	uxtb	r0, r3
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	3350      	adds	r3, #80	; 0x50
 80025c2:	4602      	mov	r2, r0
 80025c4:	701a      	strb	r2, [r3, #0]
}
 80025c6:	e1fb      	b.n	80029c0 <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	f040 811b 	bne.w	8002816 <HCD_HC_IN_IRQHandler+0x6ce>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	4619      	mov	r1, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f023 0302 	bic.w	r3, r3, #2
 8002600:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	335d      	adds	r3, #93	; 0x5d
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10a      	bne.n	800262e <HCD_HC_IN_IRQHandler+0x4e6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	e0d9      	b.n	80027e2 <HCD_HC_IN_IRQHandler+0x69a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	335d      	adds	r3, #93	; 0x5d
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10a      	bne.n	800265a <HCD_HC_IN_IRQHandler+0x512>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	335c      	adds	r3, #92	; 0x5c
 8002654:	2205      	movs	r2, #5
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e0c3      	b.n	80027e2 <HCD_HC_IN_IRQHandler+0x69a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	335d      	adds	r3, #93	; 0x5d
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b06      	cmp	r3, #6
 800266e:	d00a      	beq.n	8002686 <HCD_HC_IN_IRQHandler+0x53e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	335d      	adds	r3, #93	; 0x5d
 8002680:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002682:	2b08      	cmp	r3, #8
 8002684:	d156      	bne.n	8002734 <HCD_HC_IN_IRQHandler+0x5ec>
      hhcd->hc[ch_num].ErrCnt++;
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	3358      	adds	r3, #88	; 0x58
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	1c59      	adds	r1, r3, #1
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4403      	add	r3, r0
 80026a8:	3358      	adds	r3, #88	; 0x58
 80026aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	3358      	adds	r3, #88	; 0x58
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d914      	bls.n	80026ec <HCD_HC_IN_IRQHandler+0x5a4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	3358      	adds	r3, #88	; 0x58
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	335c      	adds	r3, #92	; 0x5c
 80026e6:	2204      	movs	r2, #4
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e009      	b.n	8002700 <HCD_HC_IN_IRQHandler+0x5b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	335c      	adds	r3, #92	; 0x5c
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002716:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800271e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e056      	b.n	80027e2 <HCD_HC_IN_IRQHandler+0x69a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	335d      	adds	r3, #93	; 0x5d
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d123      	bne.n	8002792 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	335c      	adds	r3, #92	; 0x5c
 800275a:	2202      	movs	r2, #2
 800275c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002774:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800277c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e027      	b.n	80027e2 <HCD_HC_IN_IRQHandler+0x69a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	335d      	adds	r3, #93	; 0x5d
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b07      	cmp	r3, #7
 80027a6:	d11c      	bne.n	80027e2 <HCD_HC_IN_IRQHandler+0x69a>
      hhcd->hc[ch_num].ErrCnt++;
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	3358      	adds	r3, #88	; 0x58
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	1c59      	adds	r1, r3, #1
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4403      	add	r3, r0
 80027ca:	3358      	adds	r3, #88	; 0x58
 80027cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	335c      	adds	r3, #92	; 0x5c
 80027de:	2204      	movs	r2, #4
 80027e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ee:	461a      	mov	r2, r3
 80027f0:	2302      	movs	r3, #2
 80027f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	b2d8      	uxtb	r0, r3
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	335c      	adds	r3, #92	; 0x5c
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	4601      	mov	r1, r0
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f006 fac8 	bl	8008da4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002814:	e0d4      	b.n	80029c0 <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d13f      	bne.n	80028ac <HCD_HC_IN_IRQHandler+0x764>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	4619      	mov	r1, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	3358      	adds	r3, #88	; 0x58
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	1c59      	adds	r1, r3, #1
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4403      	add	r3, r0
 8002870:	3358      	adds	r3, #88	; 0x58
 8002872:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	335d      	adds	r3, #93	; 0x5d
 8002884:	2206      	movs	r2, #6
 8002886:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f004 f8d7 	bl	8006a46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	461a      	mov	r2, r3
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	6093      	str	r3, [r2, #8]
}
 80028aa:	e089      	b.n	80029c0 <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d17e      	bne.n	80029c0 <HCD_HC_IN_IRQHandler+0x878>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	333f      	adds	r3, #63	; 0x3f
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d123      	bne.n	8002920 <HCD_HC_IN_IRQHandler+0x7d8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	3358      	adds	r3, #88	; 0x58
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	4619      	mov	r1, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f004 f894 	bl	8006a46 <USB_HC_Halt>
 800291e:	e046      	b.n	80029ae <HCD_HC_IN_IRQHandler+0x866>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	333f      	adds	r3, #63	; 0x3f
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HCD_HC_IN_IRQHandler+0x804>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	333f      	adds	r3, #63	; 0x3f
 8002946:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002948:	2b02      	cmp	r3, #2
 800294a:	d130      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0x866>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	3358      	adds	r3, #88	; 0x58
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d122      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0x866>
        hhcd->hc[ch_num].state = HC_NAK;
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	335d      	adds	r3, #93	; 0x5d
 8002978:	2203      	movs	r2, #3
 800297a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	4619      	mov	r1, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	60cb      	str	r3, [r1, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f004 f84c 	bl	8006a46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	461a      	mov	r2, r3
 80029bc:	2310      	movs	r3, #16
 80029be:	6093      	str	r3, [r2, #8]
}
 80029c0:	bf00      	nop
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d11a      	bne.n	8002a2e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	461a      	mov	r2, r3
 8002a06:	2304      	movs	r3, #4
 8002a08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	4619      	mov	r1, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    /* ... */
  }
}
 8002a2c:	e347      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d142      	bne.n	8002aca <HCD_HC_OUT_IRQHandler+0x102>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	2320      	movs	r3, #32
 8002a54:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	333d      	adds	r3, #61	; 0x3d
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	f040 8328 	bne.w	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	333d      	adds	r3, #61	; 0x3d
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	335c      	adds	r3, #92	; 0x5c
 8002a92:	2202      	movs	r2, #2
 8002a94:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f043 0302 	orr.w	r3, r3, #2
 8002ab6:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 ffbf 	bl	8006a46 <USB_HC_Halt>
}
 8002ac8:	e2f9      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d140      	bne.n	8002b62 <HCD_HC_OUT_IRQHandler+0x19a>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	335d      	adds	r3, #93	; 0x5d
 8002af0:	2204      	movs	r2, #4
 8002af2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	333d      	adds	r3, #61	; 0x3d
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	3358      	adds	r3, #88	; 0x58
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	4619      	mov	r1, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 ff7c 	bl	8006a46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2340      	movs	r3, #64	; 0x40
 8002b5e:	6093      	str	r3, [r2, #8]
}
 8002b60:	e2ad      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b78:	d123      	bne.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x1fa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	4619      	mov	r1, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 ff4d 	bl	8006a46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bbe:	6093      	str	r3, [r2, #8]
}
 8002bc0:	e27d      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d136      	bne.n	8002c46 <HCD_HC_OUT_IRQHandler+0x27e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3358      	adds	r3, #88	; 0x58
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 ff14 	bl	8006a46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	335d      	adds	r3, #93	; 0x5d
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
}
 8002c44:	e23b      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d12c      	bne.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x2ee>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fed3 	bl	8006a46 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	335d      	adds	r3, #93	; 0x5d
 8002cb0:	2205      	movs	r2, #5
 8002cb2:	701a      	strb	r2, [r3, #0]
}
 8002cb4:	e203      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d156      	bne.n	8002d7a <HCD_HC_OUT_IRQHandler+0x3b2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3358      	adds	r3, #88	; 0x58
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	335d      	adds	r3, #93	; 0x5d
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	333d      	adds	r3, #61	; 0x3d
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d114      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x36c>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	333c      	adds	r3, #60	; 0x3c
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x36c>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	333d      	adds	r3, #61	; 0x3d
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	4619      	mov	r1, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fe70 	bl	8006a46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	461a      	mov	r2, r3
 8002d74:	2310      	movs	r3, #16
 8002d76:	6093      	str	r3, [r2, #8]
}
 8002d78:	e1a1      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d12c      	bne.n	8002dea <HCD_HC_OUT_IRQHandler+0x422>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 fe42 	bl	8006a46 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	335d      	adds	r3, #93	; 0x5d
 8002dd2:	2206      	movs	r2, #6
 8002dd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	461a      	mov	r2, r3
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	6093      	str	r3, [r2, #8]
}
 8002de8:	e169      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e00:	d136      	bne.n	8002e70 <HCD_HC_OUT_IRQHandler+0x4a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0e:	4619      	mov	r1, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f043 0302 	orr.w	r3, r3, #2
 8002e22:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fe09 	bl	8006a46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	461a      	mov	r2, r3
 8002e42:	2310      	movs	r3, #16
 8002e44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	461a      	mov	r2, r3
 8002e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	335d      	adds	r3, #93	; 0x5d
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	701a      	strb	r2, [r3, #0]
}
 8002e6e:	e126      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	f040 811b 	bne.w	80030be <HCD_HC_OUT_IRQHandler+0x6f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	4619      	mov	r1, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f023 0302 	bic.w	r3, r3, #2
 8002ea8:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	335d      	adds	r3, #93	; 0x5d
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d137      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x568>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	335c      	adds	r3, #92	; 0x5c
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	333f      	adds	r3, #63	; 0x3f
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d00b      	beq.n	8002f02 <HCD_HC_OUT_IRQHandler+0x53a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	333f      	adds	r3, #63	; 0x3f
 8002efa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	f040 80c5 	bne.w	800308c <HCD_HC_OUT_IRQHandler+0x6c4>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	3351      	adds	r3, #81	; 0x51
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2d8      	uxtb	r0, r3
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	440b      	add	r3, r1
 8002f28:	3351      	adds	r3, #81	; 0x51
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e0ad      	b.n	800308c <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	335d      	adds	r3, #93	; 0x5d
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d10a      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0x594>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	440b      	add	r3, r1
 8002f54:	335c      	adds	r3, #92	; 0x5c
 8002f56:	2202      	movs	r2, #2
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e097      	b.n	800308c <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	335d      	adds	r3, #93	; 0x5d
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d10a      	bne.n	8002f88 <HCD_HC_OUT_IRQHandler+0x5c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	440b      	add	r3, r1
 8002f80:	335c      	adds	r3, #92	; 0x5c
 8002f82:	2202      	movs	r2, #2
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e081      	b.n	800308c <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	335d      	adds	r3, #93	; 0x5d
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d10a      	bne.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x5ec>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	335c      	adds	r3, #92	; 0x5c
 8002fae:	2205      	movs	r2, #5
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e06b      	b.n	800308c <HCD_HC_OUT_IRQHandler+0x6c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	335d      	adds	r3, #93	; 0x5d
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d00a      	beq.n	8002fe0 <HCD_HC_OUT_IRQHandler+0x618>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	335d      	adds	r3, #93	; 0x5d
 8002fda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d155      	bne.n	800308c <HCD_HC_OUT_IRQHandler+0x6c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	3358      	adds	r3, #88	; 0x58
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1c59      	adds	r1, r3, #1
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4403      	add	r3, r0
 8003002:	3358      	adds	r3, #88	; 0x58
 8003004:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	3358      	adds	r3, #88	; 0x58
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d914      	bls.n	8003046 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	3358      	adds	r3, #88	; 0x58
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	335c      	adds	r3, #92	; 0x5c
 8003040:	2204      	movs	r2, #4
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	e009      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x692>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	335c      	adds	r3, #92	; 0x5c
 8003056:	2202      	movs	r2, #2
 8003058:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003070:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003078:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	461a      	mov	r2, r3
 800309a:	2302      	movs	r3, #2
 800309c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	b2d8      	uxtb	r0, r3
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	335c      	adds	r3, #92	; 0x5c
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4601      	mov	r1, r0
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f005 fe73 	bl	8008da4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	0c5b      	lsrs	r3, r3, #17
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030fc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d003      	beq.n	800310c <HCD_RXQLVL_IRQHandler+0x44>
 8003104:	2b05      	cmp	r3, #5
 8003106:	f000 8082 	beq.w	800320e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800310a:	e083      	b.n	8003214 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d07f      	beq.n	8003212 <HCD_RXQLVL_IRQHandler+0x14a>
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	3344      	adds	r3, #68	; 0x44
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d074      	beq.n	8003212 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	3344      	adds	r3, #68	; 0x44
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	b292      	uxth	r2, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f003 f809 	bl	800615a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	440b      	add	r3, r1
 8003156:	3344      	adds	r3, #68	; 0x44
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	18d1      	adds	r1, r2, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4403      	add	r3, r0
 800316c:	3344      	adds	r3, #68	; 0x44
 800316e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	440b      	add	r3, r1
 800317e:	334c      	adds	r3, #76	; 0x4c
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	18d1      	adds	r1, r2, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4403      	add	r3, r0
 8003194:	334c      	adds	r3, #76	; 0x4c
 8003196:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HCD_RXQLVL_IRQHandler+0x154>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d031      	beq.n	8003212 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	3350      	adds	r3, #80	; 0x50
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	f083 0301 	eor.w	r3, r3, #1
 80031f6:	b2d8      	uxtb	r0, r3
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	3350      	adds	r3, #80	; 0x50
 8003208:	4602      	mov	r2, r0
 800320a:	701a      	strb	r2, [r3, #0]
      break;
 800320c:	e001      	b.n	8003212 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003212:	bf00      	nop
  }
}
 8003214:	bf00      	nop
 8003216:	3728      	adds	r7, #40	; 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	1ff80000 	.word	0x1ff80000

08003220 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800324c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	d10b      	bne.n	8003270 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f005 fd82 	bl	8008d6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b08      	cmp	r3, #8
 8003278:	d132      	bne.n	80032e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b04      	cmp	r3, #4
 800328a:	d126      	bne.n	80032da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d113      	bne.n	80032bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800329a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800329e:	d106      	bne.n	80032ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2102      	movs	r1, #2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f003 f894 	bl	80063d4 <USB_InitFSLSPClkSel>
 80032ac:	e011      	b.n	80032d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 f88d 	bl	80063d4 <USB_InitFSLSPClkSel>
 80032ba:	e00a      	b.n	80032d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d106      	bne.n	80032d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032ca:	461a      	mov	r2, r3
 80032cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80032d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f005 fd74 	bl	8008dc0 <HAL_HCD_PortEnabled_Callback>
 80032d8:	e002      	b.n	80032e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f005 fd7e 	bl	8008ddc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d103      	bne.n	80032f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f043 0320 	orr.w	r3, r3, #32
 80032f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032f8:	461a      	mov	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6013      	str	r3, [r2, #0]
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e11f      	b.n	800355a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fa12 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800336c:	f001 f9dc 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8003370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a7b      	ldr	r2, [pc, #492]	; (8003564 <HAL_I2C_Init+0x25c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d807      	bhi.n	800338c <HAL_I2C_Init+0x84>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a7a      	ldr	r2, [pc, #488]	; (8003568 <HAL_I2C_Init+0x260>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e006      	b.n	800339a <HAL_I2C_Init+0x92>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a77      	ldr	r2, [pc, #476]	; (800356c <HAL_I2C_Init+0x264>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0db      	b.n	800355a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a72      	ldr	r2, [pc, #456]	; (8003570 <HAL_I2C_Init+0x268>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0c9b      	lsrs	r3, r3, #18
 80033ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	6852      	ldr	r2, [r2, #4]
 80033b8:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4863      	ldr	r0, [pc, #396]	; (8003564 <HAL_I2C_Init+0x25c>)
 80033d6:	4283      	cmp	r3, r0
 80033d8:	d802      	bhi.n	80033e0 <HAL_I2C_Init+0xd8>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3301      	adds	r3, #1
 80033de:	e009      	b.n	80033f4 <HAL_I2C_Init+0xec>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80033e6:	fb00 f303 	mul.w	r3, r0, r3
 80033ea:	4862      	ldr	r0, [pc, #392]	; (8003574 <HAL_I2C_Init+0x26c>)
 80033ec:	fba0 0303 	umull	r0, r3, r0, r3
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	3301      	adds	r3, #1
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4955      	ldr	r1, [pc, #340]	; (8003564 <HAL_I2C_Init+0x25c>)
 8003410:	428b      	cmp	r3, r1
 8003412:	d80d      	bhi.n	8003430 <HAL_I2C_Init+0x128>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e59      	subs	r1, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003422:	3301      	adds	r3, #1
 8003424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003428:	2b04      	cmp	r3, #4
 800342a:	bf38      	it	cc
 800342c:	2304      	movcc	r3, #4
 800342e:	e04f      	b.n	80034d0 <HAL_I2C_Init+0x1c8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d111      	bne.n	800345c <HAL_I2C_Init+0x154>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e5c      	subs	r4, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	440b      	add	r3, r1
 8003446:	fbb4 f3f3 	udiv	r3, r4, r3
 800344a:	3301      	adds	r3, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e012      	b.n	8003482 <HAL_I2C_Init+0x17a>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e5c      	subs	r4, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	0099      	lsls	r1, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Init+0x182>
 8003486:	2301      	movs	r3, #1
 8003488:	e022      	b.n	80034d0 <HAL_I2C_Init+0x1c8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10e      	bne.n	80034b0 <HAL_I2C_Init+0x1a8>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1e5c      	subs	r4, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	440b      	add	r3, r1
 80034a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ae:	e00f      	b.n	80034d0 <HAL_I2C_Init+0x1c8>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1e5c      	subs	r4, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	0099      	lsls	r1, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	fbb4 f3f3 	udiv	r3, r4, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	69d0      	ldr	r0, [r2, #28]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6a12      	ldr	r2, [r2, #32]
 80034ea:	4302      	orrs	r2, r0
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	6908      	ldr	r0, [r1, #16]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	68c9      	ldr	r1, [r1, #12]
 800350a:	4301      	orrs	r1, r0
 800350c:	430b      	orrs	r3, r1
 800350e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6950      	ldr	r0, [r2, #20]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6992      	ldr	r2, [r2, #24]
 8003526:	4302      	orrs	r2, r0
 8003528:	430a      	orrs	r2, r1
 800352a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	bd90      	pop	{r4, r7, pc}
 8003562:	bf00      	nop
 8003564:	000186a0 	.word	0x000186a0
 8003568:	001e847f 	.word	0x001e847f
 800356c:	003d08ff 	.word	0x003d08ff
 8003570:	431bde83 	.word	0x431bde83
 8003574:	10624dd3 	.word	0x10624dd3

08003578 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e127      	b.n	80037da <HAL_I2S_Init+0x262>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a90      	ldr	r2, [pc, #576]	; (80037e4 <HAL_I2S_Init+0x26c>)
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd f94f 	bl	8000848 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035c0:	f023 030f 	bic.w	r3, r3, #15
 80035c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2202      	movs	r2, #2
 80035cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d060      	beq.n	8003698 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80035de:	2310      	movs	r3, #16
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	e001      	b.n	80035e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d802      	bhi.n	80035f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80035f6:	2001      	movs	r0, #1
 80035f8:	f001 f9a0 	bl	800493c <HAL_RCCEx_GetPeriphCLKFreq>
 80035fc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003606:	d125      	bne.n	8003654 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	fbb2 f2f3 	udiv	r2, r2, r3
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	461a      	mov	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	3305      	adds	r3, #5
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	e01f      	b.n	8003672 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	fbb2 f2f3 	udiv	r2, r2, r3
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	461a      	mov	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	3305      	adds	r3, #5
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e00e      	b.n	8003672 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	fbb2 f2f3 	udiv	r2, r2, r3
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	fbb2 f3f3 	udiv	r3, r2, r3
 800366e:	3305      	adds	r3, #5
 8003670:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4a5c      	ldr	r2, [pc, #368]	; (80037e8 <HAL_I2S_Init+0x270>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	08db      	lsrs	r3, r3, #3
 800367c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e003      	b.n	80036a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003698:	2302      	movs	r3, #2
 800369a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d902      	bls.n	80036ac <HAL_I2S_Init+0x134>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	2bff      	cmp	r3, #255	; 0xff
 80036aa:	d907      	bls.n	80036bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f043 0210 	orr.w	r2, r3, #16
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e08e      	b.n	80037da <HAL_I2S_Init+0x262>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6911      	ldr	r1, [r2, #16]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4311      	orrs	r1, r2
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036dc:	f023 030f 	bic.w	r3, r3, #15
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	6848      	ldr	r0, [r1, #4]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	6889      	ldr	r1, [r1, #8]
 80036e8:	4308      	orrs	r0, r1
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	68c9      	ldr	r1, [r1, #12]
 80036ee:	4308      	orrs	r0, r1
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	6989      	ldr	r1, [r1, #24]
 80036f4:	4301      	orrs	r1, r0
 80036f6:	430b      	orrs	r3, r1
 80036f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036fc:	61d3      	str	r3, [r2, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d161      	bne.n	80037ca <HAL_I2S_Init+0x252>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a38      	ldr	r2, [pc, #224]	; (80037ec <HAL_I2S_Init+0x274>)
 800370a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a37      	ldr	r2, [pc, #220]	; (80037f0 <HAL_I2S_Init+0x278>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_I2S_Init+0x1a2>
 8003716:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <HAL_I2S_Init+0x27c>)
 8003718:	e001      	b.n	800371e <HAL_I2S_Init+0x1a6>
 800371a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4933      	ldr	r1, [pc, #204]	; (80037f0 <HAL_I2S_Init+0x278>)
 8003724:	428b      	cmp	r3, r1
 8003726:	d101      	bne.n	800372c <HAL_I2S_Init+0x1b4>
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <HAL_I2S_Init+0x27c>)
 800372a:	e001      	b.n	8003730 <HAL_I2S_Init+0x1b8>
 800372c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003736:	f023 030f 	bic.w	r3, r3, #15
 800373a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_I2S_Init+0x278>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_I2S_Init+0x1d2>
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_I2S_Init+0x27c>)
 8003748:	e001      	b.n	800374e <HAL_I2S_Init+0x1d6>
 800374a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374e:	2202      	movs	r2, #2
 8003750:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <HAL_I2S_Init+0x278>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_I2S_Init+0x1e8>
 800375c:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <HAL_I2S_Init+0x27c>)
 800375e:	e001      	b.n	8003764 <HAL_I2S_Init+0x1ec>
 8003760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003770:	d003      	beq.n	800377a <HAL_I2S_Init+0x202>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <HAL_I2S_Init+0x20a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800377a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	e001      	b.n	8003786 <HAL_I2S_Init+0x20e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	b299      	uxth	r1, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800379c:	4303      	orrs	r3, r0
 800379e:	b29b      	uxth	r3, r3
 80037a0:	430b      	orrs	r3, r1
 80037a2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037b2:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <HAL_I2S_Init+0x278>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d101      	bne.n	80037c2 <HAL_I2S_Init+0x24a>
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_I2S_Init+0x27c>)
 80037c0:	e001      	b.n	80037c6 <HAL_I2S_Init+0x24e>
 80037c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c6:	897a      	ldrh	r2, [r7, #10]
 80037c8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	080038ef 	.word	0x080038ef
 80037e8:	cccccccd 	.word	0xcccccccd
 80037ec:	08003a05 	.word	0x08003a05
 80037f0:	40003800 	.word	0x40003800
 80037f4:	40003400 	.word	0x40003400

080037f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003844:	8812      	ldrh	r2, [r2, #0]
 8003846:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10e      	bne.n	8003888 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	6852      	ldr	r2, [r2, #4]
 8003874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003878:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ffb8 	bl	80037f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	68d2      	ldr	r2, [r2, #12]
 80038a2:	b292      	uxth	r2, r2
 80038a4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	1c9a      	adds	r2, r3, #2
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10e      	bne.n	80038e6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	6852      	ldr	r2, [r2, #4]
 80038d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff93 	bl	800380c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b04      	cmp	r3, #4
 8003908:	d13a      	bne.n	8003980 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d109      	bne.n	8003928 <I2S_IRQHandler+0x3a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d102      	bne.n	8003928 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ffb4 	bl	8003890 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d126      	bne.n	8003980 <I2S_IRQHandler+0x92>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b20      	cmp	r3, #32
 800393e:	d11f      	bne.n	8003980 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	6852      	ldr	r2, [r2, #4]
 800394a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800394e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff50 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b03      	cmp	r3, #3
 800398a:	d136      	bne.n	80039fa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	d109      	bne.n	80039aa <I2S_IRQHandler+0xbc>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b80      	cmp	r3, #128	; 0x80
 80039a2:	d102      	bne.n	80039aa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff45 	bl	8003834 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d122      	bne.n	80039fa <I2S_IRQHandler+0x10c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d11b      	bne.n	80039fa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	6852      	ldr	r2, [r2, #4]
 80039cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff13 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039fa:	bf00      	nop
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4aa2      	ldr	r2, [pc, #648]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a1e:	4ba2      	ldr	r3, [pc, #648]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a20:	e001      	b.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a9b      	ldr	r2, [pc, #620]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a3c:	4b9a      	ldr	r3, [pc, #616]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a3e:	e001      	b.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a50:	d004      	beq.n	8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 8099 	bne.w	8003b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d107      	bne.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f925 	bl	8003cc0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d107      	bne.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f9c6 	bl	8003e1c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d13a      	bne.n	8003b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d035      	beq.n	8003b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a7e      	ldr	r2, [pc, #504]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003aae:	4b7e      	ldr	r3, [pc, #504]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ab0:	e001      	b.n	8003ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	497a      	ldr	r1, [pc, #488]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003abc:	428a      	cmp	r2, r1
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0xc0>
 8003ac0:	4a79      	ldr	r2, [pc, #484]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ac2:	e001      	b.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0xc4>
 8003ac4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ac8:	6852      	ldr	r2, [r2, #4]
 8003aca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ace:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	6852      	ldr	r2, [r2, #4]
 8003ada:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ade:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fe88 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	f040 80be 	bne.w	8003c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80b8 	beq.w	8003c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	6852      	ldr	r2, [r2, #4]
 8003b32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a59      	ldr	r2, [pc, #356]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b42:	4b59      	ldr	r3, [pc, #356]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b44:	e001      	b.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	4955      	ldr	r1, [pc, #340]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b50:	428a      	cmp	r2, r1
 8003b52:	d101      	bne.n	8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
 8003b54:	4a54      	ldr	r2, [pc, #336]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b56:	e001      	b.n	8003b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x158>
 8003b58:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b5c:	6852      	ldr	r2, [r2, #4]
 8003b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f043 0204 	orr.w	r2, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fe4a 	bl	8003820 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b8c:	e084      	b.n	8003c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d107      	bne.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8be 	bl	8003d24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d107      	bne.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8fb 	bl	8003db8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d12f      	bne.n	8003c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02a      	beq.n	8003c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	6852      	ldr	r2, [r2, #4]
 8003be0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003be4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003bf0:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bf2:	e001      	b.n	8003bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	4929      	ldr	r1, [pc, #164]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bfe:	428a      	cmp	r2, r1
 8003c00:	d101      	bne.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
 8003c02:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c04:	e001      	b.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x206>
 8003c06:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c0a:	6852      	ldr	r2, [r2, #4]
 8003c0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fdfa 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d131      	bne.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d02c      	beq.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c4c:	e001      	b.n	8003c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	4913      	ldr	r1, [pc, #76]	; (8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c58:	428a      	cmp	r2, r1
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>
 8003c5c:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c5e:	e001      	b.n	8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>
 8003c60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c64:	6852      	ldr	r2, [r2, #4]
 8003c66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	6852      	ldr	r2, [r2, #4]
 8003c76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c7a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fdc5 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c96:	e000      	b.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c98:	bf00      	nop
}
 8003c9a:	bf00      	nop
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40003800 	.word	0x40003800
 8003ca8:	40003400 	.word	0x40003400

08003cac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	1c98      	adds	r0, r3, #2
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	6248      	str	r0, [r1, #36]	; 0x24
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d113      	bne.n	8003d1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	6852      	ldr	r2, [r2, #4]
 8003cfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ffc9 	bl	8003cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <I2SEx_TxISR_I2SExt+0x8c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <I2SEx_TxISR_I2SExt+0x16>
 8003d36:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <I2SEx_TxISR_I2SExt+0x90>)
 8003d38:	e001      	b.n	8003d3e <I2SEx_TxISR_I2SExt+0x1a>
 8003d3a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	1c98      	adds	r0, r3, #2
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	6248      	str	r0, [r1, #36]	; 0x24
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d121      	bne.n	8003da8 <I2SEx_TxISR_I2SExt+0x84>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a11      	ldr	r2, [pc, #68]	; (8003db0 <I2SEx_TxISR_I2SExt+0x8c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <I2SEx_TxISR_I2SExt+0x4e>
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <I2SEx_TxISR_I2SExt+0x90>)
 8003d70:	e001      	b.n	8003d76 <I2SEx_TxISR_I2SExt+0x52>
 8003d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	490d      	ldr	r1, [pc, #52]	; (8003db0 <I2SEx_TxISR_I2SExt+0x8c>)
 8003d7c:	428a      	cmp	r2, r1
 8003d7e:	d101      	bne.n	8003d84 <I2SEx_TxISR_I2SExt+0x60>
 8003d80:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <I2SEx_TxISR_I2SExt+0x90>)
 8003d82:	e001      	b.n	8003d88 <I2SEx_TxISR_I2SExt+0x64>
 8003d84:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d88:	6852      	ldr	r2, [r2, #4]
 8003d8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d8e:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <I2SEx_TxISR_I2SExt+0x84>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff82 	bl	8003cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40003800 	.word	0x40003800
 8003db4:	40003400 	.word	0x40003400

08003db8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	1c99      	adds	r1, r3, #2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	68d2      	ldr	r2, [r2, #12]
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d113      	bne.n	8003e14 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	6852      	ldr	r2, [r2, #4]
 8003df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ff4c 	bl	8003cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	1c99      	adds	r1, r3, #2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	491e      	ldr	r1, [pc, #120]	; (8003eac <I2SEx_RxISR_I2SExt+0x90>)
 8003e34:	428a      	cmp	r2, r1
 8003e36:	d101      	bne.n	8003e3c <I2SEx_RxISR_I2SExt+0x20>
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003e3a:	e001      	b.n	8003e40 <I2SEx_RxISR_I2SExt+0x24>
 8003e3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003e40:	68d2      	ldr	r2, [r2, #12]
 8003e42:	b292      	uxth	r2, r2
 8003e44:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d121      	bne.n	8003ea2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <I2SEx_RxISR_I2SExt+0x90>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <I2SEx_RxISR_I2SExt+0x50>
 8003e68:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003e6a:	e001      	b.n	8003e70 <I2SEx_RxISR_I2SExt+0x54>
 8003e6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	490d      	ldr	r1, [pc, #52]	; (8003eac <I2SEx_RxISR_I2SExt+0x90>)
 8003e76:	428a      	cmp	r2, r1
 8003e78:	d101      	bne.n	8003e7e <I2SEx_RxISR_I2SExt+0x62>
 8003e7a:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003e7c:	e001      	b.n	8003e82 <I2SEx_RxISR_I2SExt+0x66>
 8003e7e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003e82:	6852      	ldr	r2, [r2, #4]
 8003e84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e88:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff05 	bl	8003cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40003800 	.word	0x40003800
 8003eb0:	40003400 	.word	0x40003400

08003eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e25b      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d075      	beq.n	8003fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ed2:	4ba3      	ldr	r3, [pc, #652]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d00c      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ede:	4ba0      	ldr	r3, [pc, #640]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d112      	bne.n	8003f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eea:	4b9d      	ldr	r3, [pc, #628]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef6:	d10b      	bne.n	8003f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef8:	4b99      	ldr	r3, [pc, #612]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d05b      	beq.n	8003fbc <HAL_RCC_OscConfig+0x108>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d157      	bne.n	8003fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e236      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f18:	d106      	bne.n	8003f28 <HAL_RCC_OscConfig+0x74>
 8003f1a:	4a91      	ldr	r2, [pc, #580]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	4b90      	ldr	r3, [pc, #576]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e01d      	b.n	8003f64 <HAL_RCC_OscConfig+0xb0>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x98>
 8003f32:	4a8b      	ldr	r2, [pc, #556]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	4b8a      	ldr	r3, [pc, #552]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4a88      	ldr	r2, [pc, #544]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	4b87      	ldr	r3, [pc, #540]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e00b      	b.n	8003f64 <HAL_RCC_OscConfig+0xb0>
 8003f4c:	4a84      	ldr	r2, [pc, #528]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	4b84      	ldr	r3, [pc, #528]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	4a81      	ldr	r2, [pc, #516]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	4b81      	ldr	r3, [pc, #516]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d013      	beq.n	8003f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fd f9d4 	bl	8001318 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fd f9d0 	bl	8001318 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e1fb      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	4b76      	ldr	r3, [pc, #472]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0xc0>
 8003f92:	e014      	b.n	8003fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fd f9c0 	bl	8001318 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fd f9bc 	bl	8001318 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e1e7      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fae:	4b6c      	ldr	r3, [pc, #432]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0xe8>
 8003fba:	e000      	b.n	8003fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d063      	beq.n	8004092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fca:	4b65      	ldr	r3, [pc, #404]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd6:	4b62      	ldr	r3, [pc, #392]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d11c      	bne.n	800401c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d116      	bne.n	800401c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fee:	4b5c      	ldr	r3, [pc, #368]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_RCC_OscConfig+0x152>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d001      	beq.n	8004006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e1bb      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004006:	4956      	ldr	r1, [pc, #344]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	4b55      	ldr	r3, [pc, #340]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401a:	e03a      	b.n	8004092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d020      	beq.n	8004066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004024:	4b4f      	ldr	r3, [pc, #316]	; (8004164 <HAL_RCC_OscConfig+0x2b0>)
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402a:	f7fd f975 	bl	8001318 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004032:	f7fd f971 	bl	8001318 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e19c      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004044:	4b46      	ldr	r3, [pc, #280]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004050:	4943      	ldr	r1, [pc, #268]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8004052:	4b43      	ldr	r3, [pc, #268]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4313      	orrs	r3, r2
 8004062:	600b      	str	r3, [r1, #0]
 8004064:	e015      	b.n	8004092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004066:	4b3f      	ldr	r3, [pc, #252]	; (8004164 <HAL_RCC_OscConfig+0x2b0>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd f954 	bl	8001318 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004074:	f7fd f950 	bl	8001318 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e17b      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004086:	4b36      	ldr	r3, [pc, #216]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d030      	beq.n	8004100 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040a6:	4b30      	ldr	r3, [pc, #192]	; (8004168 <HAL_RCC_OscConfig+0x2b4>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ac:	f7fd f934 	bl	8001318 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b4:	f7fd f930 	bl	8001318 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e15b      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x200>
 80040d2:	e015      	b.n	8004100 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d4:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCC_OscConfig+0x2b4>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040da:	f7fd f91d 	bl	8001318 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e2:	f7fd f919 	bl	8001318 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e144      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f4:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80a0 	beq.w	800424e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410e:	2300      	movs	r3, #0
 8004110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	4a0f      	ldr	r2, [pc, #60]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412c:	6413      	str	r3, [r2, #64]	; 0x40
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413a:	2301      	movs	r3, #1
 800413c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_OscConfig+0x2b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d121      	bne.n	800418e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800414a:	4a08      	ldr	r2, [pc, #32]	; (800416c <HAL_RCC_OscConfig+0x2b8>)
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <HAL_RCC_OscConfig+0x2b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004156:	f7fd f8df 	bl	8001318 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	e011      	b.n	8004182 <HAL_RCC_OscConfig+0x2ce>
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800
 8004164:	42470000 	.word	0x42470000
 8004168:	42470e80 	.word	0x42470e80
 800416c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fd f8d2 	bl	8001318 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e0fd      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004182:	4b81      	ldr	r3, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x4d4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d106      	bne.n	80041a4 <HAL_RCC_OscConfig+0x2f0>
 8004196:	4a7d      	ldr	r2, [pc, #500]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 8004198:	4b7c      	ldr	r3, [pc, #496]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	e01c      	b.n	80041de <HAL_RCC_OscConfig+0x32a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	d10c      	bne.n	80041c6 <HAL_RCC_OscConfig+0x312>
 80041ac:	4a77      	ldr	r2, [pc, #476]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 80041ae:	4b77      	ldr	r3, [pc, #476]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	f043 0304 	orr.w	r3, r3, #4
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	4a74      	ldr	r2, [pc, #464]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 80041ba:	4b74      	ldr	r3, [pc, #464]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
 80041c4:	e00b      	b.n	80041de <HAL_RCC_OscConfig+0x32a>
 80041c6:	4a71      	ldr	r2, [pc, #452]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 80041c8:	4b70      	ldr	r3, [pc, #448]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70
 80041d2:	4a6e      	ldr	r2, [pc, #440]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 80041d4:	4b6d      	ldr	r3, [pc, #436]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d015      	beq.n	8004212 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7fd f897 	bl	8001318 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	e00a      	b.n	8004204 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fd f893 	bl	8001318 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e0bc      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004204:	4b61      	ldr	r3, [pc, #388]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ee      	beq.n	80041ee <HAL_RCC_OscConfig+0x33a>
 8004210:	e014      	b.n	800423c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004212:	f7fd f881 	bl	8001318 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004218:	e00a      	b.n	8004230 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800421a:	f7fd f87d 	bl	8001318 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	; 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e0a6      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004230:	4b56      	ldr	r3, [pc, #344]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ee      	bne.n	800421a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d105      	bne.n	800424e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004242:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 8004244:	4b51      	ldr	r3, [pc, #324]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8092 	beq.w	800437c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004258:	4b4c      	ldr	r3, [pc, #304]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d05c      	beq.n	800431e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d141      	bne.n	80042f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426c:	4b48      	ldr	r3, [pc, #288]	; (8004390 <HAL_RCC_OscConfig+0x4dc>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004272:	f7fd f851 	bl	8001318 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427a:	f7fd f84d 	bl	8001318 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e078      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428c:	4b3f      	ldr	r3, [pc, #252]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004298:	493c      	ldr	r1, [pc, #240]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	019b      	lsls	r3, r3, #6
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	3b01      	subs	r3, #1
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c2:	4b33      	ldr	r3, [pc, #204]	; (8004390 <HAL_RCC_OscConfig+0x4dc>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fd f826 	bl	8001318 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd f822 	bl	8001318 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e04d      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	4b2a      	ldr	r3, [pc, #168]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x41c>
 80042ee:	e045      	b.n	800437c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f0:	4b27      	ldr	r3, [pc, #156]	; (8004390 <HAL_RCC_OscConfig+0x4dc>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7fd f80f 	bl	8001318 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fe:	f7fd f80b 	bl	8001318 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e036      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x44a>
 800431c:	e02e      	b.n	800437c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e029      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_RCC_OscConfig+0x4d8>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	429a      	cmp	r2, r3
 800433c:	d11c      	bne.n	8004378 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d115      	bne.n	8004378 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004352:	4013      	ands	r3, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004358:	4293      	cmp	r3, r2
 800435a:	d10d      	bne.n	8004378 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d106      	bne.n	8004378 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40007000 	.word	0x40007000
 800438c:	40023800 	.word	0x40023800
 8004390:	42470060 	.word	0x42470060

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0cc      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043a8:	4b68      	ldr	r3, [pc, #416]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 020f 	and.w	r2, r3, #15
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d20c      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b65      	ldr	r3, [pc, #404]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b63      	ldr	r3, [pc, #396]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0b8      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d020      	beq.n	800441e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e8:	4a59      	ldr	r2, [pc, #356]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	4b59      	ldr	r3, [pc, #356]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004400:	4a53      	ldr	r2, [pc, #332]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4b53      	ldr	r3, [pc, #332]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800440a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800440c:	4950      	ldr	r1, [pc, #320]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4b50      	ldr	r3, [pc, #320]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d044      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d107      	bne.n	8004442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	4b47      	ldr	r3, [pc, #284]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d119      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d003      	beq.n	8004452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444e:	2b03      	cmp	r3, #3
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004452:	4b3f      	ldr	r3, [pc, #252]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e06f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004462:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e067      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004472:	4937      	ldr	r1, [pc, #220]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	4b36      	ldr	r3, [pc, #216]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f023 0203 	bic.w	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004484:	f7fc ff48 	bl	8001318 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448c:	f7fc ff44 	bl	8001318 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	; 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e04f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 020c 	and.w	r2, r3, #12
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d1eb      	bne.n	800448c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 020f 	and.w	r2, r3, #15
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d90c      	bls.n	80044dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b22      	ldr	r3, [pc, #136]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 020f 	and.w	r2, r3, #15
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e032      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e8:	4919      	ldr	r1, [pc, #100]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	4b19      	ldr	r3, [pc, #100]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004506:	4912      	ldr	r1, [pc, #72]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	4b11      	ldr	r3, [pc, #68]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800451a:	f000 f821 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 800451e:	4601      	mov	r1, r0
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <HAL_RCC_ClockConfig+0x1c0>)
 800452c:	5cd3      	ldrb	r3, [r2, r3]
 800452e:	fa21 f303 	lsr.w	r3, r1, r3
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc fea8 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40023c00 	.word	0x40023c00
 8004550:	40023800 	.word	0x40023800
 8004554:	08009450 	.word	0x08009450
 8004558:	20000000 	.word	0x20000000
 800455c:	20000004 	.word	0x20000004

08004560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004564:	b08f      	sub	sp, #60	; 0x3c
 8004566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456c:	2300      	movs	r3, #0
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
 8004570:	2300      	movs	r3, #0
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004578:	4b62      	ldr	r3, [pc, #392]	; (8004704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b04      	cmp	r3, #4
 8004582:	d007      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x34>
 8004584:	2b08      	cmp	r3, #8
 8004586:	d008      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0x3a>
 8004588:	2b00      	cmp	r3, #0
 800458a:	f040 80b2 	bne.w	80046f2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800458e:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004590:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8004592:	e0b1      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004594:	4b5d      	ldr	r3, [pc, #372]	; (800470c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004596:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004598:	e0ae      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800459a:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045a4:	4b57      	ldr	r3, [pc, #348]	; (8004704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d04e      	beq.n	800464e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b0:	4b54      	ldr	r3, [pc, #336]	; (8004704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	f04f 0400 	mov.w	r4, #0
 80045ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	ea01 0103 	and.w	r1, r1, r3
 80045c6:	ea02 0204 	and.w	r2, r2, r4
 80045ca:	460b      	mov	r3, r1
 80045cc:	4614      	mov	r4, r2
 80045ce:	0160      	lsls	r0, r4, #5
 80045d0:	6278      	str	r0, [r7, #36]	; 0x24
 80045d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045d4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80045d8:	6278      	str	r0, [r7, #36]	; 0x24
 80045da:	015b      	lsls	r3, r3, #5
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80045e2:	1a5b      	subs	r3, r3, r1
 80045e4:	eb64 0402 	sbc.w	r4, r4, r2
 80045e8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80045ec:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80045f0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80045f4:	ebb8 0803 	subs.w	r8, r8, r3
 80045f8:	eb69 0904 	sbc.w	r9, r9, r4
 80045fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004614:	eb18 0801 	adds.w	r8, r8, r1
 8004618:	eb49 0902 	adc.w	r9, r9, r2
 800461c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004634:	4640      	mov	r0, r8
 8004636:	4649      	mov	r1, r9
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	f04f 0400 	mov.w	r4, #0
 800463e:	461a      	mov	r2, r3
 8004640:	4623      	mov	r3, r4
 8004642:	f7fb fdc1 	bl	80001c8 <__aeabi_uldivmod>
 8004646:	4603      	mov	r3, r0
 8004648:	460c      	mov	r4, r1
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
 800464c:	e043      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464e:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	099b      	lsrs	r3, r3, #6
 8004654:	f04f 0400 	mov.w	r4, #0
 8004658:	f240 11ff 	movw	r1, #511	; 0x1ff
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	ea01 0103 	and.w	r1, r1, r3
 8004664:	ea02 0204 	and.w	r2, r2, r4
 8004668:	460b      	mov	r3, r1
 800466a:	4614      	mov	r4, r2
 800466c:	0160      	lsls	r0, r4, #5
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	015b      	lsls	r3, r3, #5
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004680:	1a5b      	subs	r3, r3, r1
 8004682:	eb64 0402 	sbc.w	r4, r4, r2
 8004686:	01a6      	lsls	r6, r4, #6
 8004688:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800468c:	019d      	lsls	r5, r3, #6
 800468e:	1aed      	subs	r5, r5, r3
 8004690:	eb66 0604 	sbc.w	r6, r6, r4
 8004694:	00f3      	lsls	r3, r6, #3
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	00eb      	lsls	r3, r5, #3
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	e897 0060 	ldmia.w	r7, {r5, r6}
 80046a8:	186d      	adds	r5, r5, r1
 80046aa:	eb46 0602 	adc.w	r6, r6, r2
 80046ae:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80046b2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80046b6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80046ba:	4655      	mov	r5, sl
 80046bc:	465e      	mov	r6, fp
 80046be:	4628      	mov	r0, r5
 80046c0:	4631      	mov	r1, r6
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	f04f 0400 	mov.w	r4, #0
 80046c8:	461a      	mov	r2, r3
 80046ca:	4623      	mov	r3, r4
 80046cc:	f7fb fd7c 	bl	80001c8 <__aeabi_uldivmod>
 80046d0:	4603      	mov	r3, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	0c1b      	lsrs	r3, r3, #16
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	3301      	adds	r3, #1
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80046e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046f0:	e002      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	373c      	adds	r7, #60	; 0x3c
 80046fe:	46bd      	mov	sp, r7
 8004700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004704:	40023800 	.word	0x40023800
 8004708:	00f42400 	.word	0x00f42400
 800470c:	007a1200 	.word	0x007a1200

08004710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <HAL_RCC_GetHCLKFreq+0x14>)
 8004716:	681b      	ldr	r3, [r3, #0]
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000000 	.word	0x20000000

08004728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800472c:	f7ff fff0 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 8004730:	4601      	mov	r1, r0
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	0a9b      	lsrs	r3, r3, #10
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	4a03      	ldr	r2, [pc, #12]	; (800474c <HAL_RCC_GetPCLK1Freq+0x24>)
 800473e:	5cd3      	ldrb	r3, [r2, r3]
 8004740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40023800 	.word	0x40023800
 800474c:	08009460 	.word	0x08009460

08004750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004754:	f7ff ffdc 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 8004758:	4601      	mov	r1, r0
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0b5b      	lsrs	r3, r3, #13
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4a03      	ldr	r2, [pc, #12]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004766:	5cd3      	ldrb	r3, [r2, r3]
 8004768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800
 8004774:	08009460 	.word	0x08009460

08004778 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800479c:	2b00      	cmp	r3, #0
 800479e:	d035      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047a0:	4b62      	ldr	r3, [pc, #392]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047a6:	f7fc fdb7 	bl	8001318 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047ae:	f7fc fdb3 	bl	8001318 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e0b0      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c0:	4b5b      	ldr	r3, [pc, #364]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f0      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80047cc:	4958      	ldr	r1, [pc, #352]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	019a      	lsls	r2, r3, #6
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	071b      	lsls	r3, r3, #28
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047e0:	4b52      	ldr	r3, [pc, #328]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047e6:	f7fc fd97 	bl	8001318 <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047ee:	f7fc fd93 	bl	8001318 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e090      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004800:	4b4b      	ldr	r3, [pc, #300]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8083 	beq.w	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	4a44      	ldr	r2, [pc, #272]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004820:	4b43      	ldr	r3, [pc, #268]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004828:	6413      	str	r3, [r2, #64]	; 0x40
 800482a:	4b41      	ldr	r3, [pc, #260]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004836:	4a3f      	ldr	r2, [pc, #252]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004838:	4b3e      	ldr	r3, [pc, #248]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004840:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004842:	f7fc fd69 	bl	8001318 <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800484a:	f7fc fd65 	bl	8001318 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e062      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004868:	4b31      	ldr	r3, [pc, #196]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004870:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d02f      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d028      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004886:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004890:	4b29      	ldr	r3, [pc, #164]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004896:	4b28      	ldr	r3, [pc, #160]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800489c:	4a24      	ldr	r2, [pc, #144]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048a2:	4b23      	ldr	r3, [pc, #140]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d114      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fc fd33 	bl	8001318 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b4:	e00a      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fc fd2f 	bl	8001318 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e02a      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ee      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e4:	d10d      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80048e6:	4912      	ldr	r1, [pc, #72]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80048f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]
 8004900:	e005      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004902:	4a0b      	ldr	r2, [pc, #44]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800490c:	6093      	str	r3, [r2, #8]
 800490e:	4908      	ldr	r1, [pc, #32]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004912:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800491c:	4313      	orrs	r3, r2
 800491e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	42470068 	.word	0x42470068
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
 8004938:	42470e40 	.word	0x42470e40

0800493c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d13d      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800495a:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004962:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800496a:	2b01      	cmp	r3, #1
 800496c:	d12f      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800496e:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004970:	617b      	str	r3, [r7, #20]
          break;
 8004972:	e02f      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004974:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004980:	d108      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004982:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800498a:	4a18      	ldr	r2, [pc, #96]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	e007      	b.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049aa:	099b      	lsrs	r3, r3, #6
 80049ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049be:	0f1b      	lsrs	r3, r3, #28
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]
          break;
 80049cc:	e002      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
          break;
 80049d2:	bf00      	nop
        }
      }
      break;
 80049d4:	bf00      	nop
    }
  }
  return frequency;
 80049d6:	697b      	ldr	r3, [r7, #20]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40023800 	.word	0x40023800
 80049e8:	00bb8000 	.word	0x00bb8000
 80049ec:	007a1200 	.word	0x007a1200
 80049f0:	00f42400 	.word	0x00f42400

080049f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e055      	b.n	8004ab2 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fc f8fd 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6851      	ldr	r1, [r2, #4]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6892      	ldr	r2, [r2, #8]
 8004a4a:	4311      	orrs	r1, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68d2      	ldr	r2, [r2, #12]
 8004a50:	4311      	orrs	r1, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6912      	ldr	r2, [r2, #16]
 8004a56:	4311      	orrs	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6952      	ldr	r2, [r2, #20]
 8004a5c:	4311      	orrs	r1, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6992      	ldr	r2, [r2, #24]
 8004a62:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004a66:	4311      	orrs	r1, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	69d2      	ldr	r2, [r2, #28]
 8004a6c:	4311      	orrs	r1, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6a12      	ldr	r2, [r2, #32]
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6992      	ldr	r2, [r2, #24]
 8004a84:	0c12      	lsrs	r2, r2, #16
 8004a86:	f002 0104 	and.w	r1, r2, #4
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	69d2      	ldr	r2, [r2, #28]
 8004a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e01d      	b.n	8004b08 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fc fa89 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3304      	adds	r3, #4
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 f9fb 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e01d      	b.n	8004b5e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f815 	bl	8004b66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 f9d0 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fc9a 	bl	80054c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <HAL_TIM_PWM_Start+0x74>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_TIM_PWM_Start+0x2c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <HAL_TIM_PWM_Start+0x78>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_TIM_PWM_Start+0x30>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_TIM_PWM_Start+0x32>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b06      	cmp	r3, #6
 8004bd2:	d007      	beq.n	8004be4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40010400 	.word	0x40010400

08004bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e0b4      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	f200 809f 	bhi.w	8004d68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004d69 	.word	0x08004d69
 8004c38:	08004d69 	.word	0x08004d69
 8004c3c:	08004d69 	.word	0x08004d69
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004d69 	.word	0x08004d69
 8004c48:	08004d69 	.word	0x08004d69
 8004c4c:	08004d69 	.word	0x08004d69
 8004c50:	08004ce7 	.word	0x08004ce7
 8004c54:	08004d69 	.word	0x08004d69
 8004c58:	08004d69 	.word	0x08004d69
 8004c5c:	08004d69 	.word	0x08004d69
 8004c60:	08004d27 	.word	0x08004d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f9e2 	bl	8005034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	6992      	ldr	r2, [r2, #24]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	6992      	ldr	r2, [r2, #24]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	6991      	ldr	r1, [r2, #24]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	6912      	ldr	r2, [r2, #16]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	619a      	str	r2, [r3, #24]
      break;
 8004ca2:	e062      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fa32 	bl	8005114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	6992      	ldr	r2, [r2, #24]
 8004cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	6992      	ldr	r2, [r2, #24]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	6991      	ldr	r1, [r2, #24]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	6912      	ldr	r2, [r2, #16]
 8004cde:	0212      	lsls	r2, r2, #8
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	619a      	str	r2, [r3, #24]
      break;
 8004ce4:	e041      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fa87 	bl	8005200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	69d2      	ldr	r2, [r2, #28]
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	69d2      	ldr	r2, [r2, #28]
 8004d0c:	f022 0204 	bic.w	r2, r2, #4
 8004d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	69d1      	ldr	r1, [r2, #28]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	6912      	ldr	r2, [r2, #16]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	61da      	str	r2, [r3, #28]
      break;
 8004d24:	e021      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fadb 	bl	80052e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	69d2      	ldr	r2, [r2, #28]
 8004d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	69d2      	ldr	r2, [r2, #28]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	69d1      	ldr	r1, [r2, #28]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	6912      	ldr	r2, [r2, #16]
 8004d60:	0212      	lsls	r2, r2, #8
 8004d62:	430a      	orrs	r2, r1
 8004d64:	61da      	str	r2, [r3, #28]
      break;
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004d68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_ConfigClockSource+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0a6      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x166>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b40      	cmp	r3, #64	; 0x40
 8004dd2:	d067      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x120>
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d80b      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x6c>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d073      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0x140>
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d802      	bhi.n	8004de6 <HAL_TIM_ConfigClockSource+0x62>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d06f      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004de4:	e078      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d06c      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0x140>
 8004dea:	2b30      	cmp	r3, #48	; 0x30
 8004dec:	d06a      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004dee:	e073      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004df0:	2b70      	cmp	r3, #112	; 0x70
 8004df2:	d00d      	beq.n	8004e10 <HAL_TIM_ConfigClockSource+0x8c>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d804      	bhi.n	8004e02 <HAL_TIM_ConfigClockSource+0x7e>
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d033      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0xe0>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d041      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e00:	e06a      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e06:	d066      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x152>
 8004e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0c:	d017      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e0e:	e063      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	6899      	ldr	r1, [r3, #8]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f000 fb32 	bl	8005488 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	609a      	str	r2, [r3, #8]
      break;
 8004e3c:	e04c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f000 fb1b 	bl	8005488 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	6892      	ldr	r2, [r2, #8]
 8004e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e60:	609a      	str	r2, [r3, #8]
      break;
 8004e62:	e039      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f000 fa8f 	bl	8005394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2150      	movs	r1, #80	; 0x50
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fae8 	bl	8005452 <TIM_ITRx_SetConfig>
      break;
 8004e82:	e029      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f000 faae 	bl	80053f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2160      	movs	r1, #96	; 0x60
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fad8 	bl	8005452 <TIM_ITRx_SetConfig>
      break;
 8004ea2:	e019      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f000 fa6f 	bl	8005394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2140      	movs	r1, #64	; 0x40
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fac8 	bl	8005452 <TIM_ITRx_SetConfig>
      break;
 8004ec2:	e009      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f000 fabf 	bl	8005452 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a40      	ldr	r2, [pc, #256]	; (8005008 <TIM_Base_SetConfig+0x114>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f12:	d00f      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a3d      	ldr	r2, [pc, #244]	; (800500c <TIM_Base_SetConfig+0x118>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a3c      	ldr	r2, [pc, #240]	; (8005010 <TIM_Base_SetConfig+0x11c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a3b      	ldr	r2, [pc, #236]	; (8005014 <TIM_Base_SetConfig+0x120>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a3a      	ldr	r2, [pc, #232]	; (8005018 <TIM_Base_SetConfig+0x124>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2f      	ldr	r2, [pc, #188]	; (8005008 <TIM_Base_SetConfig+0x114>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f54:	d027      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2c      	ldr	r2, [pc, #176]	; (800500c <TIM_Base_SetConfig+0x118>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d023      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2b      	ldr	r2, [pc, #172]	; (8005010 <TIM_Base_SetConfig+0x11c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a2a      	ldr	r2, [pc, #168]	; (8005014 <TIM_Base_SetConfig+0x120>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a29      	ldr	r2, [pc, #164]	; (8005018 <TIM_Base_SetConfig+0x124>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a28      	ldr	r2, [pc, #160]	; (800501c <TIM_Base_SetConfig+0x128>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a27      	ldr	r2, [pc, #156]	; (8005020 <TIM_Base_SetConfig+0x12c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a26      	ldr	r2, [pc, #152]	; (8005024 <TIM_Base_SetConfig+0x130>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a25      	ldr	r2, [pc, #148]	; (8005028 <TIM_Base_SetConfig+0x134>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a24      	ldr	r2, [pc, #144]	; (800502c <TIM_Base_SetConfig+0x138>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a23      	ldr	r2, [pc, #140]	; (8005030 <TIM_Base_SetConfig+0x13c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <TIM_Base_SetConfig+0x114>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_Base_SetConfig+0xf8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	; (8005018 <TIM_Base_SetConfig+0x124>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d103      	bne.n	8004ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010000 	.word	0x40010000
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	40010400 	.word	0x40010400
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800
 8005028:	40001800 	.word	0x40001800
 800502c:	40001c00 	.word	0x40001c00
 8005030:	40002000 	.word	0x40002000

08005034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 0302 	bic.w	r3, r3, #2
 800507c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a20      	ldr	r2, [pc, #128]	; (800510c <TIM_OC1_SetConfig+0xd8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_OC1_SetConfig+0x64>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1f      	ldr	r2, [pc, #124]	; (8005110 <TIM_OC1_SetConfig+0xdc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d10c      	bne.n	80050b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0308 	bic.w	r3, r3, #8
 800509e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a15      	ldr	r2, [pc, #84]	; (800510c <TIM_OC1_SetConfig+0xd8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC1_SetConfig+0x8e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a14      	ldr	r2, [pc, #80]	; (8005110 <TIM_OC1_SetConfig+0xdc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d111      	bne.n	80050e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	621a      	str	r2, [r3, #32]
}
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40010000 	.word	0x40010000
 8005110:	40010400 	.word	0x40010400

08005114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f023 0210 	bic.w	r2, r3, #16
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0320 	bic.w	r3, r3, #32
 800515e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <TIM_OC2_SetConfig+0xe4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_OC2_SetConfig+0x68>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a21      	ldr	r2, [pc, #132]	; (80051fc <TIM_OC2_SetConfig+0xe8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d10d      	bne.n	8005198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <TIM_OC2_SetConfig+0xe4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC2_SetConfig+0x94>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a16      	ldr	r2, [pc, #88]	; (80051fc <TIM_OC2_SetConfig+0xe8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d113      	bne.n	80051d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400

08005200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <TIM_OC3_SetConfig+0xe0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_OC3_SetConfig+0x66>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <TIM_OC3_SetConfig+0xe4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d10d      	bne.n	8005282 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800526c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <TIM_OC3_SetConfig+0xe0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_OC3_SetConfig+0x92>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <TIM_OC3_SetConfig+0xe4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d113      	bne.n	80052ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	621a      	str	r2, [r3, #32]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40010400 	.word	0x40010400

080052e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	031b      	lsls	r3, r3, #12
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a12      	ldr	r2, [pc, #72]	; (800538c <TIM_OC4_SetConfig+0xa4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_OC4_SetConfig+0x68>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a11      	ldr	r2, [pc, #68]	; (8005390 <TIM_OC4_SetConfig+0xa8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d109      	bne.n	8005364 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	019b      	lsls	r3, r3, #6
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000
 8005390:	40010400 	.word	0x40010400

08005394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 0201 	bic.w	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f023 030a 	bic.w	r3, r3, #10
 80053d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	621a      	str	r2, [r3, #32]
}
 80053e6:	bf00      	nop
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b087      	sub	sp, #28
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0210 	bic.w	r2, r3, #16
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800541c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	031b      	lsls	r3, r3, #12
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800542e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005452:	b480      	push	{r7}
 8005454:	b085      	sub	sp, #20
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	f043 0307 	orr.w	r3, r3, #7
 8005474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	609a      	str	r2, [r3, #8]
}
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	021a      	lsls	r2, r3, #8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	609a      	str	r2, [r3, #8]
}
 80054bc:	bf00      	nop
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 031f 	and.w	r3, r3, #31
 80054da:	2201      	movs	r2, #1
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1a      	ldr	r2, [r3, #32]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	401a      	ands	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1a      	ldr	r2, [r3, #32]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005528:	2302      	movs	r3, #2
 800552a:	e05a      	b.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d022      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d01d      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d018      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1a      	ldr	r2, [pc, #104]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a17      	ldr	r2, [pc, #92]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a15      	ldr	r2, [pc, #84]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10c      	bne.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40010000 	.word	0x40010000
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40000c00 	.word	0x40000c00
 8005600:	40010400 	.word	0x40010400
 8005604:	40014000 	.word	0x40014000
 8005608:	40001800 	.word	0x40001800

0800560c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e03f      	b.n	800569e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fb fdc2 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2224      	movs	r2, #36	; 0x24
 800563c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	68d2      	ldr	r2, [r2, #12]
 800564a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800564e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f919 	bl	8005888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	6912      	ldr	r2, [r2, #16]
 8005660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	6952      	ldr	r2, [r2, #20]
 8005670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	68d2      	ldr	r2, [r2, #12]
 8005680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b088      	sub	sp, #32
 80056aa:	af02      	add	r7, sp, #8
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	f040 8090 	bne.w	80057e8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_UART_Receive+0x2e>
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e088      	b.n	80057ea <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Receive+0x40>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e081      	b.n	80057ea <HAL_UART_Receive+0x144>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2222      	movs	r2, #34	; 0x22
 80056f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80056fc:	f7fb fe0c 	bl	8001318 <HAL_GetTick>
 8005700:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	88fa      	ldrh	r2, [r7, #6]
 8005706:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	88fa      	ldrh	r2, [r7, #6]
 800570c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005716:	e05c      	b.n	80057d2 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572e:	d12b      	bne.n	8005788 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2200      	movs	r2, #0
 8005738:	2120      	movs	r1, #32
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f859 	bl	80057f2 <UART_WaitOnFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e04f      	b.n	80057ea <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10c      	bne.n	8005770 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005762:	b29a      	uxth	r2, r3
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	3302      	adds	r3, #2
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	e030      	b.n	80057d2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	b29b      	uxth	r3, r3
 8005778:	b2db      	uxtb	r3, r3
 800577a:	b29a      	uxth	r2, r3
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3301      	adds	r3, #1
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	e024      	b.n	80057d2 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2200      	movs	r2, #0
 8005790:	2120      	movs	r1, #32
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f82d 	bl	80057f2 <UART_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e023      	b.n	80057ea <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d108      	bne.n	80057bc <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	60ba      	str	r2, [r7, #8]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	6852      	ldr	r2, [r2, #4]
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	e00a      	b.n	80057d2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	60ba      	str	r2, [r7, #8]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6852      	ldr	r2, [r2, #4]
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d19d      	bne.n	8005718 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e000      	b.n	80057ea <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
  }
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	603b      	str	r3, [r7, #0]
 80057fe:	4613      	mov	r3, r2
 8005800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005802:	e02c      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d028      	beq.n	800585e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0x30>
 8005812:	f7fb fd81 	bl	8001318 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	429a      	cmp	r2, r3
 8005820:	d91d      	bls.n	800585e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	68d2      	ldr	r2, [r2, #12]
 800582c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005830:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6952      	ldr	r2, [r2, #20]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e00f      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	401a      	ands	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	429a      	cmp	r2, r3
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	429a      	cmp	r2, r3
 800587a:	d0c3      	beq.n	8005804 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	b0a3      	sub	sp, #140	; 0x8c
 800588e:	af00      	add	r7, sp, #0
 8005890:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005894:	6819      	ldr	r1, [r3, #0]
 8005896:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 80058c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058c4:	6819      	ldr	r1, [r3, #0]
 80058c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80058d0:	f022 020c 	bic.w	r2, r2, #12
 80058d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d8:	4313      	orrs	r3, r2
 80058da:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fa:	f040 8171 	bne.w	8005be0 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4ab4      	ldr	r2, [pc, #720]	; (8005bd4 <UART_SetConfig+0x34c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d005      	beq.n	8005914 <UART_SetConfig+0x8c>
 8005908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4ab2      	ldr	r2, [pc, #712]	; (8005bd8 <UART_SetConfig+0x350>)
 800590e:	4293      	cmp	r3, r2
 8005910:	f040 80b1 	bne.w	8005a76 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fe ff1c 	bl	8004750 <HAL_RCC_GetPCLK2Freq>
 8005918:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800591c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800591e:	681d      	ldr	r5, [r3, #0]
 8005920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005924:	4619      	mov	r1, r3
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	460b      	mov	r3, r1
 800592c:	4614      	mov	r4, r2
 800592e:	18db      	adds	r3, r3, r3
 8005930:	eb44 0404 	adc.w	r4, r4, r4
 8005934:	185b      	adds	r3, r3, r1
 8005936:	eb44 0402 	adc.w	r4, r4, r2
 800593a:	00e0      	lsls	r0, r4, #3
 800593c:	6478      	str	r0, [r7, #68]	; 0x44
 800593e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005940:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005944:	6478      	str	r0, [r7, #68]	; 0x44
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	643b      	str	r3, [r7, #64]	; 0x40
 800594a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800594e:	eb13 0801 	adds.w	r8, r3, r1
 8005952:	eb44 0902 	adc.w	r9, r4, r2
 8005956:	4640      	mov	r0, r8
 8005958:	4649      	mov	r1, r9
 800595a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f04f 0400 	mov.w	r4, #0
 8005962:	18db      	adds	r3, r3, r3
 8005964:	eb44 0404 	adc.w	r4, r4, r4
 8005968:	461a      	mov	r2, r3
 800596a:	4623      	mov	r3, r4
 800596c:	f7fa fc2c 	bl	80001c8 <__aeabi_uldivmod>
 8005970:	4603      	mov	r3, r0
 8005972:	460c      	mov	r4, r1
 8005974:	461a      	mov	r2, r3
 8005976:	4b99      	ldr	r3, [pc, #612]	; (8005bdc <UART_SetConfig+0x354>)
 8005978:	fba3 2302 	umull	r2, r3, r3, r2
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	011e      	lsls	r6, r3, #4
 8005980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005984:	4619      	mov	r1, r3
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	460b      	mov	r3, r1
 800598c:	4614      	mov	r4, r2
 800598e:	18db      	adds	r3, r3, r3
 8005990:	eb44 0404 	adc.w	r4, r4, r4
 8005994:	185b      	adds	r3, r3, r1
 8005996:	eb44 0402 	adc.w	r4, r4, r2
 800599a:	00e0      	lsls	r0, r4, #3
 800599c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800599e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80059a0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80059a4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059aa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80059ae:	eb13 0801 	adds.w	r8, r3, r1
 80059b2:	eb44 0902 	adc.w	r9, r4, r2
 80059b6:	4640      	mov	r0, r8
 80059b8:	4649      	mov	r1, r9
 80059ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f04f 0400 	mov.w	r4, #0
 80059c2:	18db      	adds	r3, r3, r3
 80059c4:	eb44 0404 	adc.w	r4, r4, r4
 80059c8:	461a      	mov	r2, r3
 80059ca:	4623      	mov	r3, r4
 80059cc:	f7fa fbfc 	bl	80001c8 <__aeabi_uldivmod>
 80059d0:	4603      	mov	r3, r0
 80059d2:	460c      	mov	r4, r1
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b81      	ldr	r3, [pc, #516]	; (8005bdc <UART_SetConfig+0x354>)
 80059d8:	fba3 1302 	umull	r1, r3, r3, r2
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	2164      	movs	r1, #100	; 0x64
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	3332      	adds	r3, #50	; 0x32
 80059ea:	4a7c      	ldr	r2, [pc, #496]	; (8005bdc <UART_SetConfig+0x354>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059f8:	441e      	add	r6, r3
 80059fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059fe:	4619      	mov	r1, r3
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4614      	mov	r4, r2
 8005a08:	18db      	adds	r3, r3, r3
 8005a0a:	eb44 0404 	adc.w	r4, r4, r4
 8005a0e:	185b      	adds	r3, r3, r1
 8005a10:	eb44 0402 	adc.w	r4, r4, r2
 8005a14:	00e0      	lsls	r0, r4, #3
 8005a16:	6378      	str	r0, [r7, #52]	; 0x34
 8005a18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a1a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005a1e:	6378      	str	r0, [r7, #52]	; 0x34
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	633b      	str	r3, [r7, #48]	; 0x30
 8005a24:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005a28:	eb13 0801 	adds.w	r8, r3, r1
 8005a2c:	eb44 0902 	adc.w	r9, r4, r2
 8005a30:	4640      	mov	r0, r8
 8005a32:	4649      	mov	r1, r9
 8005a34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	18db      	adds	r3, r3, r3
 8005a3e:	eb44 0404 	adc.w	r4, r4, r4
 8005a42:	461a      	mov	r2, r3
 8005a44:	4623      	mov	r3, r4
 8005a46:	f7fa fbbf 	bl	80001c8 <__aeabi_uldivmod>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4b62      	ldr	r3, [pc, #392]	; (8005bdc <UART_SetConfig+0x354>)
 8005a52:	fba3 1302 	umull	r1, r3, r3, r2
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2164      	movs	r1, #100	; 0x64
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	3332      	adds	r3, #50	; 0x32
 8005a64:	4a5d      	ldr	r2, [pc, #372]	; (8005bdc <UART_SetConfig+0x354>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	4433      	add	r3, r6
 8005a72:	60ab      	str	r3, [r5, #8]
 8005a74:	e240      	b.n	8005ef8 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a76:	f7fe fe57 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005a7a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	673a      	str	r2, [r7, #112]	; 0x70
 8005a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4614      	mov	r4, r2
 8005a92:	18db      	adds	r3, r3, r3
 8005a94:	eb44 0404 	adc.w	r4, r4, r4
 8005a98:	185b      	adds	r3, r3, r1
 8005a9a:	eb44 0402 	adc.w	r4, r4, r2
 8005a9e:	00e0      	lsls	r0, r4, #3
 8005aa0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aa4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005aa8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aae:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005ab2:	185d      	adds	r5, r3, r1
 8005ab4:	eb44 0602 	adc.w	r6, r4, r2
 8005ab8:	4628      	mov	r0, r5
 8005aba:	4631      	mov	r1, r6
 8005abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f04f 0400 	mov.w	r4, #0
 8005ac4:	18db      	adds	r3, r3, r3
 8005ac6:	eb44 0404 	adc.w	r4, r4, r4
 8005aca:	461a      	mov	r2, r3
 8005acc:	4623      	mov	r3, r4
 8005ace:	f7fa fb7b 	bl	80001c8 <__aeabi_uldivmod>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4b40      	ldr	r3, [pc, #256]	; (8005bdc <UART_SetConfig+0x354>)
 8005ada:	fba3 2302 	umull	r2, r3, r3, r2
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	011e      	lsls	r6, r3, #4
 8005ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4614      	mov	r4, r2
 8005af0:	18db      	adds	r3, r3, r3
 8005af2:	eb44 0404 	adc.w	r4, r4, r4
 8005af6:	185b      	adds	r3, r3, r1
 8005af8:	eb44 0402 	adc.w	r4, r4, r2
 8005afc:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8005b00:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8005b04:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8005b08:	4653      	mov	r3, sl
 8005b0a:	465c      	mov	r4, fp
 8005b0c:	eb13 0a01 	adds.w	sl, r3, r1
 8005b10:	eb44 0b02 	adc.w	fp, r4, r2
 8005b14:	4650      	mov	r0, sl
 8005b16:	4659      	mov	r1, fp
 8005b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f04f 0400 	mov.w	r4, #0
 8005b20:	18db      	adds	r3, r3, r3
 8005b22:	eb44 0404 	adc.w	r4, r4, r4
 8005b26:	461a      	mov	r2, r3
 8005b28:	4623      	mov	r3, r4
 8005b2a:	f7fa fb4d 	bl	80001c8 <__aeabi_uldivmod>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	460c      	mov	r4, r1
 8005b32:	461a      	mov	r2, r3
 8005b34:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <UART_SetConfig+0x354>)
 8005b36:	fba3 1302 	umull	r1, r3, r3, r2
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	2164      	movs	r1, #100	; 0x64
 8005b3e:	fb01 f303 	mul.w	r3, r1, r3
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	3332      	adds	r3, #50	; 0x32
 8005b48:	4a24      	ldr	r2, [pc, #144]	; (8005bdc <UART_SetConfig+0x354>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b56:	441e      	add	r6, r3
 8005b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4614      	mov	r4, r2
 8005b66:	18db      	adds	r3, r3, r3
 8005b68:	eb44 0404 	adc.w	r4, r4, r4
 8005b6c:	185b      	adds	r3, r3, r1
 8005b6e:	eb44 0402 	adc.w	r4, r4, r2
 8005b72:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005b76:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8005b7a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8005b7e:	4643      	mov	r3, r8
 8005b80:	464c      	mov	r4, r9
 8005b82:	eb13 0801 	adds.w	r8, r3, r1
 8005b86:	eb44 0902 	adc.w	r9, r4, r2
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f04f 0400 	mov.w	r4, #0
 8005b96:	18db      	adds	r3, r3, r3
 8005b98:	eb44 0404 	adc.w	r4, r4, r4
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4623      	mov	r3, r4
 8005ba0:	f7fa fb12 	bl	80001c8 <__aeabi_uldivmod>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <UART_SetConfig+0x354>)
 8005bac:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	2164      	movs	r1, #100	; 0x64
 8005bb4:	fb01 f303 	mul.w	r3, r1, r3
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	3332      	adds	r3, #50	; 0x32
 8005bbe:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <UART_SetConfig+0x354>)
 8005bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	4433      	add	r3, r6
 8005bcc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005bce:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005bd0:	e192      	b.n	8005ef8 <UART_SetConfig+0x670>
 8005bd2:	bf00      	nop
 8005bd4:	40011000 	.word	0x40011000
 8005bd8:	40011400 	.word	0x40011400
 8005bdc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4bc1      	ldr	r3, [pc, #772]	; (8005eec <UART_SetConfig+0x664>)
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d005      	beq.n	8005bf6 <UART_SetConfig+0x36e>
 8005bea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4bc0      	ldr	r3, [pc, #768]	; (8005ef0 <UART_SetConfig+0x668>)
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	f040 80bf 	bne.w	8005d74 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bf6:	f7fe fdab 	bl	8004750 <HAL_RCC_GetPCLK2Freq>
 8005bfa:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c00:	681e      	ldr	r6, [r3, #0]
 8005c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4614      	mov	r4, r2
 8005c10:	18db      	adds	r3, r3, r3
 8005c12:	eb44 0404 	adc.w	r4, r4, r4
 8005c16:	185b      	adds	r3, r3, r1
 8005c18:	eb44 0402 	adc.w	r4, r4, r2
 8005c1c:	00e0      	lsls	r0, r4, #3
 8005c1e:	6278      	str	r0, [r7, #36]	; 0x24
 8005c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c22:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005c26:	6278      	str	r0, [r7, #36]	; 0x24
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	623b      	str	r3, [r7, #32]
 8005c2c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005c30:	eb13 0801 	adds.w	r8, r3, r1
 8005c34:	eb44 0902 	adc.w	r9, r4, r2
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f04f 0400 	mov.w	r4, #0
 8005c44:	00a2      	lsls	r2, r4, #2
 8005c46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005c48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c4a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005c4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c58:	f7fa fab6 	bl	80001c8 <__aeabi_uldivmod>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	461a      	mov	r2, r3
 8005c62:	4ba4      	ldr	r3, [pc, #656]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005c64:	fba3 2302 	umull	r2, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	011d      	lsls	r5, r3, #4
 8005c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c70:	4619      	mov	r1, r3
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	18db      	adds	r3, r3, r3
 8005c7c:	eb44 0404 	adc.w	r4, r4, r4
 8005c80:	185b      	adds	r3, r3, r1
 8005c82:	eb44 0402 	adc.w	r4, r4, r2
 8005c86:	00e0      	lsls	r0, r4, #3
 8005c88:	61f8      	str	r0, [r7, #28]
 8005c8a:	69f8      	ldr	r0, [r7, #28]
 8005c8c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005c90:	61f8      	str	r0, [r7, #28]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005c9a:	eb13 0801 	adds.w	r8, r3, r1
 8005c9e:	eb44 0902 	adc.w	r9, r4, r2
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f04f 0400 	mov.w	r4, #0
 8005cae:	00a2      	lsls	r2, r4, #2
 8005cb0:	657a      	str	r2, [r7, #84]	; 0x54
 8005cb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cb4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005cb8:	657a      	str	r2, [r7, #84]	; 0x54
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8005cbe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005cc2:	f7fa fa81 	bl	80001c8 <__aeabi_uldivmod>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	460c      	mov	r4, r1
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4b89      	ldr	r3, [pc, #548]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005cce:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2164      	movs	r1, #100	; 0x64
 8005cd6:	fb01 f303 	mul.w	r3, r1, r3
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	3332      	adds	r3, #50	; 0x32
 8005ce0:	4a84      	ldr	r2, [pc, #528]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cec:	441d      	add	r5, r3
 8005cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	18db      	adds	r3, r3, r3
 8005cfe:	eb44 0404 	adc.w	r4, r4, r4
 8005d02:	185b      	adds	r3, r3, r1
 8005d04:	eb44 0402 	adc.w	r4, r4, r2
 8005d08:	00e0      	lsls	r0, r4, #3
 8005d0a:	6178      	str	r0, [r7, #20]
 8005d0c:	6978      	ldr	r0, [r7, #20]
 8005d0e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005d12:	6178      	str	r0, [r7, #20]
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005d1c:	eb13 0801 	adds.w	r8, r3, r1
 8005d20:	eb44 0902 	adc.w	r9, r4, r2
 8005d24:	4640      	mov	r0, r8
 8005d26:	4649      	mov	r1, r9
 8005d28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f04f 0400 	mov.w	r4, #0
 8005d30:	00a2      	lsls	r2, r4, #2
 8005d32:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d36:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005d3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d44:	f7fa fa40 	bl	80001c8 <__aeabi_uldivmod>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b69      	ldr	r3, [pc, #420]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005d50:	fba3 1302 	umull	r1, r3, r3, r2
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	2164      	movs	r1, #100	; 0x64
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	3332      	adds	r3, #50	; 0x32
 8005d62:	4a64      	ldr	r2, [pc, #400]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005d64:	fba2 2303 	umull	r2, r3, r2, r3
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	442b      	add	r3, r5
 8005d70:	60b3      	str	r3, [r6, #8]
 8005d72:	e0c1      	b.n	8005ef8 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d74:	f7fe fcd8 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005d78:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d86:	4619      	mov	r1, r3
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4614      	mov	r4, r2
 8005d90:	18db      	adds	r3, r3, r3
 8005d92:	eb44 0404 	adc.w	r4, r4, r4
 8005d96:	185b      	adds	r3, r3, r1
 8005d98:	eb44 0402 	adc.w	r4, r4, r2
 8005d9c:	00e6      	lsls	r6, r4, #3
 8005d9e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8005da2:	00dd      	lsls	r5, r3, #3
 8005da4:	462b      	mov	r3, r5
 8005da6:	4634      	mov	r4, r6
 8005da8:	185d      	adds	r5, r3, r1
 8005daa:	eb44 0602 	adc.w	r6, r4, r2
 8005dae:	4628      	mov	r0, r5
 8005db0:	4631      	mov	r1, r6
 8005db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f04f 0400 	mov.w	r4, #0
 8005dba:	00a5      	lsls	r5, r4, #2
 8005dbc:	677d      	str	r5, [r7, #116]	; 0x74
 8005dbe:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8005dc0:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8005dc4:	677d      	str	r5, [r7, #116]	; 0x74
 8005dc6:	009c      	lsls	r4, r3, #2
 8005dc8:	673c      	str	r4, [r7, #112]	; 0x70
 8005dca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005dce:	f7fa f9fb 	bl	80001c8 <__aeabi_uldivmod>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	4b46      	ldr	r3, [pc, #280]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005dda:	fba3 1302 	umull	r1, r3, r3, r2
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	011d      	lsls	r5, r3, #4
 8005de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005de6:	4619      	mov	r1, r3
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4614      	mov	r4, r2
 8005df0:	18db      	adds	r3, r3, r3
 8005df2:	eb44 0404 	adc.w	r4, r4, r4
 8005df6:	185b      	adds	r3, r3, r1
 8005df8:	eb44 0402 	adc.w	r4, r4, r2
 8005dfc:	00e0      	lsls	r0, r4, #3
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	00d8      	lsls	r0, r3, #3
 8005e0a:	60b8      	str	r0, [r7, #8]
 8005e0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005e10:	eb13 0801 	adds.w	r8, r3, r1
 8005e14:	eb44 0902 	adc.w	r9, r4, r2
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f04f 0400 	mov.w	r4, #0
 8005e24:	00a6      	lsls	r6, r4, #2
 8005e26:	66fe      	str	r6, [r7, #108]	; 0x6c
 8005e28:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8005e2a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8005e2e:	66fe      	str	r6, [r7, #108]	; 0x6c
 8005e30:	009c      	lsls	r4, r3, #2
 8005e32:	66bc      	str	r4, [r7, #104]	; 0x68
 8005e34:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005e38:	f7fa f9c6 	bl	80001c8 <__aeabi_uldivmod>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	461a      	mov	r2, r3
 8005e42:	4b2c      	ldr	r3, [pc, #176]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005e44:	fba3 1302 	umull	r1, r3, r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	2164      	movs	r1, #100	; 0x64
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	3332      	adds	r3, #50	; 0x32
 8005e56:	4a27      	ldr	r2, [pc, #156]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005e58:	fba2 1303 	umull	r1, r3, r2, r3
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e62:	441d      	add	r5, r3
 8005e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4614      	mov	r4, r2
 8005e72:	18db      	adds	r3, r3, r3
 8005e74:	eb44 0404 	adc.w	r4, r4, r4
 8005e78:	185b      	adds	r3, r3, r1
 8005e7a:	eb44 0402 	adc.w	r4, r4, r2
 8005e7e:	00e0      	lsls	r0, r4, #3
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	00d8      	lsls	r0, r3, #3
 8005e8c:	6038      	str	r0, [r7, #0]
 8005e8e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8005e92:	eb13 0801 	adds.w	r8, r3, r1
 8005e96:	eb44 0902 	adc.w	r9, r4, r2
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f04f 0400 	mov.w	r4, #0
 8005ea6:	00a6      	lsls	r6, r4, #2
 8005ea8:	667e      	str	r6, [r7, #100]	; 0x64
 8005eaa:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8005eac:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8005eb0:	667e      	str	r6, [r7, #100]	; 0x64
 8005eb2:	009c      	lsls	r4, r3, #2
 8005eb4:	663c      	str	r4, [r7, #96]	; 0x60
 8005eb6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005eba:	f7fa f985 	bl	80001c8 <__aeabi_uldivmod>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	2164      	movs	r1, #100	; 0x64
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	3332      	adds	r3, #50	; 0x32
 8005ed8:	4a06      	ldr	r2, [pc, #24]	; (8005ef4 <UART_SetConfig+0x66c>)
 8005eda:	fba2 1303 	umull	r1, r3, r2, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	442b      	add	r3, r5
 8005ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee8:	6093      	str	r3, [r2, #8]
}
 8005eea:	e005      	b.n	8005ef8 <UART_SetConfig+0x670>
 8005eec:	40011000 	.word	0x40011000
 8005ef0:	40011400 	.word	0x40011400
 8005ef4:	51eb851f 	.word	0x51eb851f
 8005ef8:	bf00      	nop
 8005efa:	378c      	adds	r7, #140	; 0x8c
 8005efc:	46bd      	mov	sp, r7
 8005efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f02:	bf00      	nop

08005f04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f04:	b084      	sub	sp, #16
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	f107 001c 	add.w	r0, r7, #28
 8005f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d122      	bne.n	8005f62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d105      	bne.n	8005f56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f94a 	bl	80061f0 <USB_CoreReset>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
 8005f60:	e01a      	b.n	8005f98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f93e 	bl	80061f0 <USB_CoreReset>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
 8005f8a:	e005      	b.n	8005f98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d10b      	bne.n	8005fb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f043 0206 	orr.w	r2, r3, #6
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fc2:	b004      	add	sp, #16
 8005fc4:	4770      	bx	lr

08005fc6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f043 0201 	orr.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f023 0201 	bic.w	r2, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d106      	bne.n	8006036 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60da      	str	r2, [r3, #12]
 8006034:	e00b      	b.n	800604e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60da      	str	r2, [r3, #12]
 8006048:	e001      	b.n	800604e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e003      	b.n	8006056 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800604e:	2032      	movs	r0, #50	; 0x32
 8006050:	f7fb f96e 	bl	8001330 <HAL_Delay>

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	019b      	lsls	r3, r3, #6
 8006072:	f043 0220 	orr.w	r2, r3, #32
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3301      	adds	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4a09      	ldr	r2, [pc, #36]	; (80060a8 <USB_FlushTxFifo+0x48>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d901      	bls.n	800608c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e006      	b.n	800609a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b20      	cmp	r3, #32
 8006096:	d0f0      	beq.n	800607a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	00030d40 	.word	0x00030d40

080060ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2210      	movs	r2, #16
 80060bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3301      	adds	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4a09      	ldr	r2, [pc, #36]	; (80060ec <USB_FlushRxFifo+0x40>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d901      	bls.n	80060d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e006      	b.n	80060de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d0f0      	beq.n	80060be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	00030d40 	.word	0x00030d40

080060f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b089      	sub	sp, #36	; 0x24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4611      	mov	r1, r2
 80060fc:	461a      	mov	r2, r3
 80060fe:	460b      	mov	r3, r1
 8006100:	71fb      	strb	r3, [r7, #7]
 8006102:	4613      	mov	r3, r2
 8006104:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800610e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d11a      	bne.n	800614c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006116:	88bb      	ldrh	r3, [r7, #4]
 8006118:	3303      	adds	r3, #3
 800611a:	089b      	lsrs	r3, r3, #2
 800611c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	e00f      	b.n	8006144 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	031a      	lsls	r2, r3, #12
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4413      	add	r3, r2
 800612c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006130:	461a      	mov	r2, r3
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	3304      	adds	r3, #4
 800613c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	3301      	adds	r3, #1
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d3eb      	bcc.n	8006124 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3724      	adds	r7, #36	; 0x24
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800615a:	b480      	push	{r7}
 800615c:	b089      	sub	sp, #36	; 0x24
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	4613      	mov	r3, r2
 8006166:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	3303      	adds	r3, #3
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006178:	2300      	movs	r3, #0
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	e00b      	b.n	8006196 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	601a      	str	r2, [r3, #0]
    pDest++;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	3304      	adds	r3, #4
 800618e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	3301      	adds	r3, #1
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	429a      	cmp	r2, r3
 800619c:	d3ef      	bcc.n	800617e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800619e:	69fb      	ldr	r3, [r7, #28]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3724      	adds	r7, #36	; 0x24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4013      	ands	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061c4:	68fb      	ldr	r3, [r7, #12]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0301 	and.w	r3, r3, #1
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
	...

080061f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3301      	adds	r3, #1
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a13      	ldr	r2, [pc, #76]	; (8006254 <USB_CoreReset+0x64>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d901      	bls.n	800620e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e01b      	b.n	8006246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	daf2      	bge.n	80061fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f043 0201 	orr.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <USB_CoreReset+0x64>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d901      	bls.n	8006238 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e006      	b.n	8006246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d0f0      	beq.n	8006226 <USB_CoreReset+0x36>

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	00030d40 	.word	0x00030d40

08006258 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006258:	b084      	sub	sp, #16
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	f107 001c 	add.w	r0, r7, #28
 8006266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006274:	461a      	mov	r2, r3
 8006276:	2300      	movs	r3, #0
 8006278:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01a      	beq.n	80062e0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10b      	bne.n	80062c8 <USB_HostInit+0x70>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b6:	461a      	mov	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f043 0304 	orr.w	r3, r3, #4
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e016      	b.n	80062f6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f023 0304 	bic.w	r3, r3, #4
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e00a      	b.n	80062f6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e6:	461a      	mov	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f023 0304 	bic.w	r3, r3, #4
 80062f4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80062f6:	2110      	movs	r1, #16
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff feb1 	bl	8006060 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fed4 	bl	80060ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	e015      	b.n	8006336 <USB_HostInit+0xde>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006316:	461a      	mov	r2, r3
 8006318:	f04f 33ff 	mov.w	r3, #4294967295
 800631c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632a:	461a      	mov	r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	6a3a      	ldr	r2, [r7, #32]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	429a      	cmp	r2, r3
 800633c:	d8e5      	bhi.n	800630a <USB_HostInit+0xb2>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800633e:	2101      	movs	r1, #1
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8af 	bl	80064a4 <USB_DriveVbus>

  HAL_Delay(200U);
 8006346:	20c8      	movs	r0, #200	; 0xc8
 8006348:	f7fa fff2 	bl	8001330 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f04f 32ff 	mov.w	r2, #4294967295
 8006358:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <USB_HostInit+0x126>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <USB_HostInit+0x168>)
 8006372:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <USB_HostInit+0x16c>)
 8006378:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800637c:	e009      	b.n	8006392 <USB_HostInit+0x13a>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2280      	movs	r2, #128	; 0x80
 8006382:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <USB_HostInit+0x170>)
 8006388:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a0f      	ldr	r2, [pc, #60]	; (80063cc <USB_HostInit+0x174>)
 800638e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <USB_HostInit+0x14c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f043 0210 	orr.w	r2, r3, #16
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699a      	ldr	r2, [r3, #24]
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <USB_HostInit+0x178>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063bc:	b004      	add	sp, #16
 80063be:	4770      	bx	lr
 80063c0:	01000200 	.word	0x01000200
 80063c4:	00e00300 	.word	0x00e00300
 80063c8:	00600080 	.word	0x00600080
 80063cc:	004000e0 	.word	0x004000e0
 80063d0:	a3200008 	.word	0xa3200008

080063d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ea:	461a      	mov	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f023 0303 	bic.w	r3, r3, #3
 80063f8:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006400:	4619      	mov	r1, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	4313      	orrs	r3, r2
 8006412:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d107      	bne.n	800642a <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006420:	461a      	mov	r2, r3
 8006422:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006426:	6053      	str	r3, [r2, #4]
 8006428:	e009      	b.n	800643e <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d106      	bne.n	800643e <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006436:	461a      	mov	r2, r3
 8006438:	f241 7370 	movw	r3, #6000	; 0x1770
 800643c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800646c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006474:	461a      	mov	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800647e:	2064      	movs	r0, #100	; 0x64
 8006480:	f7fa ff56 	bl	8001330 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800648a:	461a      	mov	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006492:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006494:	200a      	movs	r0, #10
 8006496:	f7fa ff4b 	bl	8001330 <HAL_Delay>

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80064c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <USB_DriveVbus+0x46>
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d107      	bne.n	80064ea <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064e0:	461a      	mov	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064e8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f4:	d10a      	bne.n	800650c <USB_DriveVbus+0x68>
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d107      	bne.n	800650c <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006502:	461a      	mov	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800650a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	0c5b      	lsrs	r3, r3, #17
 8006538:	f003 0303 	and.w	r3, r3, #3
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	b29b      	uxth	r3, r3
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	461a      	mov	r2, r3
 800657a:	4603      	mov	r3, r0
 800657c:	70fb      	strb	r3, [r7, #3]
 800657e:	460b      	mov	r3, r1
 8006580:	70bb      	strb	r3, [r7, #2]
 8006582:	4613      	mov	r3, r2
 8006584:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	461a      	mov	r2, r3
 800659c:	f04f 33ff 	mov.w	r3, #4294967295
 80065a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80065a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	f200 8084 	bhi.w	80066b4 <USB_HC_Init+0x148>
 80065ac:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <USB_HC_Init+0x48>)
 80065ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b2:	bf00      	nop
 80065b4:	080065c5 	.word	0x080065c5
 80065b8:	08006675 	.word	0x08006675
 80065bc:	080065c5 	.word	0x080065c5
 80065c0:	08006635 	.word	0x08006635
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d0:	461a      	mov	r2, r3
 80065d2:	f240 439d 	movw	r3, #1181	; 0x49d
 80065d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80065d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	da11      	bge.n	8006604 <USB_HC_Init+0x98>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ec:	4619      	mov	r1, r3
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006600:	60cb      	str	r3, [r1, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006602:	e05a      	b.n	80066ba <USB_HC_Init+0x14e>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660c:	2b00      	cmp	r3, #0
 800660e:	d054      	beq.n	80066ba <USB_HC_Init+0x14e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4413      	add	r3, r2
 8006618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661c:	4619      	mov	r1, r3
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006630:	60cb      	str	r3, [r1, #12]
      break;
 8006632:	e042      	b.n	80066ba <USB_HC_Init+0x14e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	461a      	mov	r2, r3
 8006642:	f240 639d 	movw	r3, #1693	; 0x69d
 8006646:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006648:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800664c:	2b00      	cmp	r3, #0
 800664e:	da36      	bge.n	80066be <USB_HC_Init+0x152>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665c:	4619      	mov	r1, r3
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4413      	add	r3, r2
 8006666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006670:	60cb      	str	r3, [r1, #12]
      }

      break;
 8006672:	e024      	b.n	80066be <USB_HC_Init+0x152>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4413      	add	r3, r2
 800667c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006680:	461a      	mov	r2, r3
 8006682:	f240 2325 	movw	r3, #549	; 0x225
 8006686:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006688:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800668c:	2b00      	cmp	r3, #0
 800668e:	da18      	bge.n	80066c2 <USB_HC_Init+0x156>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669c:	4619      	mov	r1, r3
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80066b0:	60cb      	str	r3, [r1, #12]
      }
      break;
 80066b2:	e006      	b.n	80066c2 <USB_HC_Init+0x156>

    default:
      ret = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	75fb      	strb	r3, [r7, #23]
      break;
 80066b8:	e004      	b.n	80066c4 <USB_HC_Init+0x158>
      break;
 80066ba:	bf00      	nop
 80066bc:	e002      	b.n	80066c4 <USB_HC_Init+0x158>
      break;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <USB_HC_Init+0x158>
      break;
 80066c2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ca:	4618      	mov	r0, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d2:	699a      	ldr	r2, [r3, #24]
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	2101      	movs	r1, #1
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	4313      	orrs	r3, r2
 80066e2:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80066f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da03      	bge.n	8006700 <USB_HC_Init+0x194>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80066f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e001      	b.n	8006704 <USB_HC_Init+0x198>
  }
  else
  {
    HCcharEpDir = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006704:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d103      	bne.n	8006714 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800670c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e001      	b.n	8006718 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006724:	4619      	mov	r1, r3
 8006726:	787b      	ldrb	r3, [r7, #1]
 8006728:	059b      	lsls	r3, r3, #22
 800672a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800672e:	78bb      	ldrb	r3, [r7, #2]
 8006730:	02db      	lsls	r3, r3, #11
 8006732:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006736:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006738:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800673c:	049b      	lsls	r3, r3, #18
 800673e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006742:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006746:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800674a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	431a      	orrs	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006754:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006756:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800675a:	2b03      	cmp	r3, #3
 800675c:	d110      	bne.n	8006780 <USB_HC_Init+0x214>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	4619      	mov	r1, r3
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800677e:	600b      	str	r3, [r1, #0]
  }

  return ret;
 8006780:	7dfb      	ldrb	r3, [r7, #23]
}
 8006782:	4618      	mov	r0, r3
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop

08006790 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08c      	sub	sp, #48	; 0x30
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80067a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d029      	beq.n	800680e <USB_HC_StartXfer+0x7e>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	791b      	ldrb	r3, [r3, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d125      	bne.n	800680e <USB_HC_StartXfer+0x7e>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10b      	bne.n	80067e0 <USB_HC_StartXfer+0x50>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	795b      	ldrb	r3, [r3, #5]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d107      	bne.n	80067e0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	4619      	mov	r1, r3
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fa3e 	bl	8006c58 <USB_DoPing>
      return HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	e118      	b.n	8006a12 <USB_HC_StartXfer+0x282>
    }
    else if (dma == 1U)
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d113      	bne.n	800680e <USB_HC_StartXfer+0x7e>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f2:	4619      	mov	r1, r3
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006806:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d018      	beq.n	8006848 <USB_HC_StartXfer+0xb8>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	8912      	ldrh	r2, [r2, #8]
 800681e:	4413      	add	r3, r2
 8006820:	3b01      	subs	r3, #1
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	8912      	ldrh	r2, [r2, #8]
 8006826:	fbb3 f3f2 	udiv	r3, r3, r2
 800682a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800682c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800682e:	8b7b      	ldrh	r3, [r7, #26]
 8006830:	429a      	cmp	r2, r3
 8006832:	d90b      	bls.n	800684c <USB_HC_StartXfer+0xbc>
    {
      num_packets = max_hc_pkt_count;
 8006834:	8b7b      	ldrh	r3, [r7, #26]
 8006836:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	8912      	ldrh	r2, [r2, #8]
 800683e:	fb02 f203 	mul.w	r2, r2, r3
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	611a      	str	r2, [r3, #16]
 8006846:	e001      	b.n	800684c <USB_HC_StartXfer+0xbc>
    }
  }
  else
  {
    num_packets = 1U;
 8006848:	2301      	movs	r3, #1
 800684a:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	78db      	ldrb	r3, [r3, #3]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <USB_HC_StartXfer+0xd2>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	8912      	ldrh	r2, [r2, #8]
 800685a:	fb02 f203 	mul.w	r2, r2, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686e:	4618      	mov	r0, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800687a:	04d9      	lsls	r1, r3, #19
 800687c:	4b67      	ldr	r3, [pc, #412]	; (8006a1c <USB_HC_StartXfer+0x28c>)
 800687e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006880:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	7a9b      	ldrb	r3, [r3, #10]
 8006886:	075b      	lsls	r3, r3, #29
 8006888:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800688c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800688e:	6103      	str	r3, [r0, #16]

  if (dma != 0U)
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <USB_HC_StartXfer+0x11a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	4413      	add	r3, r2
 800689e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a2:	461a      	mov	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	6153      	str	r3, [r2, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bf0c      	ite	eq
 80068ba:	2301      	moveq	r3, #1
 80068bc:	2300      	movne	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ce:	4619      	mov	r1, r3
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068e2:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	4619      	mov	r1, r3
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	7e7b      	ldrb	r3, [r7, #25]
 8006902:	075b      	lsls	r3, r3, #29
 8006904:	4313      	orrs	r3, r2
 8006906:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	4413      	add	r3, r2
 8006910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a42      	ldr	r2, [pc, #264]	; (8006a20 <USB_HC_StartXfer+0x290>)
 8006918:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800691a:	4b41      	ldr	r3, [pc, #260]	; (8006a20 <USB_HC_StartXfer+0x290>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006922:	4a3f      	ldr	r2, [pc, #252]	; (8006a20 <USB_HC_StartXfer+0x290>)
 8006924:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	78db      	ldrb	r3, [r3, #3]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d006      	beq.n	800693c <USB_HC_StartXfer+0x1ac>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800692e:	4b3c      	ldr	r3, [pc, #240]	; (8006a20 <USB_HC_StartXfer+0x290>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006936:	4a3a      	ldr	r2, [pc, #232]	; (8006a20 <USB_HC_StartXfer+0x290>)
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	e005      	b.n	8006948 <USB_HC_StartXfer+0x1b8>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800693c:	4b38      	ldr	r3, [pc, #224]	; (8006a20 <USB_HC_StartXfer+0x290>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006944:	4a36      	ldr	r2, [pc, #216]	; (8006a20 <USB_HC_StartXfer+0x290>)
 8006946:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006948:	4b35      	ldr	r3, [pc, #212]	; (8006a20 <USB_HC_StartXfer+0x290>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006950:	4a33      	ldr	r2, [pc, #204]	; (8006a20 <USB_HC_StartXfer+0x290>)
 8006952:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006960:	461a      	mov	r2, r3
 8006962:	4b2f      	ldr	r3, [pc, #188]	; (8006a20 <USB_HC_StartXfer+0x290>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <USB_HC_StartXfer+0x1e2>
  {
    return HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	e04f      	b.n	8006a12 <USB_HC_StartXfer+0x282>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	78db      	ldrb	r3, [r3, #3]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d14a      	bne.n	8006a10 <USB_HC_StartXfer+0x280>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d046      	beq.n	8006a10 <USB_HC_StartXfer+0x280>
  {
    switch (hc->ep_type)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	79db      	ldrb	r3, [r3, #7]
 8006986:	2b03      	cmp	r3, #3
 8006988:	d830      	bhi.n	80069ec <USB_HC_StartXfer+0x25c>
 800698a:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <USB_HC_StartXfer+0x200>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069a1 	.word	0x080069a1
 8006994:	080069c5 	.word	0x080069c5
 8006998:	080069a1 	.word	0x080069a1
 800699c:	080069c5 	.word	0x080069c5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	3303      	adds	r3, #3
 80069a6:	089b      	lsrs	r3, r3, #2
 80069a8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80069aa:	8afa      	ldrh	r2, [r7, #22]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d91c      	bls.n	80069f0 <USB_HC_StartXfer+0x260>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	f043 0220 	orr.w	r2, r3, #32
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80069c2:	e015      	b.n	80069f0 <USB_HC_StartXfer+0x260>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	3303      	adds	r3, #3
 80069ca:	089b      	lsrs	r3, r3, #2
 80069cc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80069ce:	8afa      	ldrh	r2, [r7, #22]
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	429a      	cmp	r2, r3
 80069dc:	d90a      	bls.n	80069f4 <USB_HC_StartXfer+0x264>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80069ea:	e003      	b.n	80069f4 <USB_HC_StartXfer+0x264>

      default:
        break;
 80069ec:	bf00      	nop
 80069ee:	e002      	b.n	80069f6 <USB_HC_StartXfer+0x266>
        break;
 80069f0:	bf00      	nop
 80069f2:	e000      	b.n	80069f6 <USB_HC_StartXfer+0x266>
        break;
 80069f4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	68d9      	ldr	r1, [r3, #12]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	785a      	ldrb	r2, [r3, #1]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	b298      	uxth	r0, r3
 8006a04:	2300      	movs	r3, #0
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	4603      	mov	r3, r0
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7ff fb70 	bl	80060f0 <USB_WritePacket>
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3728      	adds	r7, #40	; 0x28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	1ff80000 	.word	0x1ff80000
 8006a20:	200000b0 	.word	0x200000b0

08006a24 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	b29b      	uxth	r3, r3
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	0c9b      	lsrs	r3, r3, #18
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <USB_HC_Halt+0x3a>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d171      	bne.n	8006b64 <USB_HC_Halt+0x11e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa0:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d146      	bne.n	8006b3c <USB_HC_Halt+0xf6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aba:	4619      	mov	r1, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ace:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006adc:	4619      	mov	r1, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afe:	4619      	mov	r1, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b12:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3301      	adds	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b20:	d81e      	bhi.n	8006b60 <USB_HC_Halt+0x11a>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b38:	d0ec      	beq.n	8006b14 <USB_HC_Halt+0xce>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b3a:	e086      	b.n	8006c4a <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b48:	4619      	mov	r1, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b5c:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b5e:	e074      	b.n	8006c4a <USB_HC_Halt+0x204>
          break;
 8006b60:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b62:	e072      	b.n	8006c4a <USB_HC_Halt+0x204>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b70:	4619      	mov	r1, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b84:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d146      	bne.n	8006c24 <USB_HC_Halt+0x1de>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bb6:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bd8:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be6:	4619      	mov	r1, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bfa:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c08:	d81e      	bhi.n	8006c48 <USB_HC_Halt+0x202>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c20:	d0ec      	beq.n	8006bfc <USB_HC_Halt+0x1b6>
 8006c22:	e012      	b.n	8006c4a <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c30:	4619      	mov	r1, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c44:	600b      	str	r3, [r1, #0]
 8006c46:	e000      	b.n	8006c4a <USB_HC_Halt+0x204>
          break;
 8006c48:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	04da      	lsls	r2, r3, #19
 8006c82:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <USB_DoPing+0x74>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c8a:	610b      	str	r3, [r1, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ca2:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006caa:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	1ff80000 	.word	0x1ff80000

08006cd0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff f981 	bl	8005fe8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ce6:	2110      	movs	r1, #16
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff f9b9 	bl	8006060 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff f9dc 	bl	80060ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	e01f      	b.n	8006d3a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d20:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	3301      	adds	r3, #1
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b0f      	cmp	r3, #15
 8006d3e:	d9dc      	bls.n	8006cfa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006d40:	2300      	movs	r3, #0
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	e034      	b.n	8006db0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	3301      	adds	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d8c:	d80c      	bhi.n	8006da8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da4:	d0ec      	beq.n	8006d80 <USB_StopHost+0xb0>
 8006da6:	e000      	b.n	8006daa <USB_StopHost+0xda>
        break;
 8006da8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	3301      	adds	r3, #1
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	2b0f      	cmp	r3, #15
 8006db4:	d9c7      	bls.n	8006d46 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff f8fa 	bl	8005fc6 <USB_EnableGlobalInt>

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ddc:	b590      	push	{r4, r7, lr}
 8006dde:	b089      	sub	sp, #36	; 0x24
 8006de0:	af04      	add	r7, sp, #16
 8006de2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006de4:	2301      	movs	r3, #1
 8006de6:	2202      	movs	r2, #2
 8006de8:	2102      	movs	r1, #2
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fc68 	bl	80076c0 <USBH_FindInterface>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	2bff      	cmp	r3, #255	; 0xff
 8006df8:	d002      	beq.n	8006e00 <USBH_CDC_InterfaceInit+0x24>
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d901      	bls.n	8006e04 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e00:	2302      	movs	r3, #2
 8006e02:	e13d      	b.n	8007080 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc3d 	bl	8007688 <USBH_SelectInterface>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e131      	b.n	8007080 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006e22:	2050      	movs	r0, #80	; 0x50
 8006e24:	f002 fa30 	bl	8009288 <malloc>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e11f      	b.n	8007080 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006e40:	2250      	movs	r2, #80	; 0x50
 8006e42:	2100      	movs	r1, #0
 8006e44:	68b8      	ldr	r0, [r7, #8]
 8006e46:	f002 fa2f 	bl	80092a8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	211a      	movs	r1, #26
 8006e50:	fb01 f303 	mul.w	r3, r1, r3
 8006e54:	4413      	add	r3, r2
 8006e56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	da15      	bge.n	8006e8e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	211a      	movs	r1, #26
 8006e68:	fb01 f303 	mul.w	r3, r1, r3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e72:	781a      	ldrb	r2, [r3, #0]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	211a      	movs	r1, #26
 8006e7e:	fb01 f303 	mul.w	r3, r1, r3
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e88:	881a      	ldrh	r2, [r3, #0]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	785b      	ldrb	r3, [r3, #1]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fe36 	bl	8008b06 <USBH_AllocPipe>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	7819      	ldrb	r1, [r3, #0]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	7858      	ldrb	r0, [r3, #1]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	8952      	ldrh	r2, [r2, #10]
 8006eba:	9202      	str	r2, [sp, #8]
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	9201      	str	r2, [sp, #4]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fdee 	bl	8008aa8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f002 f8fd 	bl	80090d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006eda:	2300      	movs	r3, #0
 8006edc:	2200      	movs	r2, #0
 8006ede:	210a      	movs	r1, #10
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fbed 	bl	80076c0 <USBH_FindInterface>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	2bff      	cmp	r3, #255	; 0xff
 8006eee:	d002      	beq.n	8006ef6 <USBH_CDC_InterfaceInit+0x11a>
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d901      	bls.n	8006efa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e0c2      	b.n	8007080 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	211a      	movs	r1, #26
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	4413      	add	r3, r2
 8006f06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b25b      	sxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	da16      	bge.n	8006f40 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	211a      	movs	r1, #26
 8006f18:	fb01 f303 	mul.w	r3, r1, r3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	211a      	movs	r1, #26
 8006f2e:	fb01 f303 	mul.w	r3, r1, r3
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f38:	881a      	ldrh	r2, [r3, #0]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	835a      	strh	r2, [r3, #26]
 8006f3e:	e015      	b.n	8006f6c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	211a      	movs	r1, #26
 8006f46:	fb01 f303 	mul.w	r3, r1, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	211a      	movs	r1, #26
 8006f5c:	fb01 f303 	mul.w	r3, r1, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f66:	881a      	ldrh	r2, [r3, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	211a      	movs	r1, #26
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	4413      	add	r3, r2
 8006f78:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	b25b      	sxtb	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da16      	bge.n	8006fb2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	211a      	movs	r1, #26
 8006f8a:	fb01 f303 	mul.w	r3, r1, r3
 8006f8e:	4413      	add	r3, r2
 8006f90:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f94:	781a      	ldrb	r2, [r3, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	211a      	movs	r1, #26
 8006fa0:	fb01 f303 	mul.w	r3, r1, r3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006faa:	881a      	ldrh	r2, [r3, #0]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	835a      	strh	r2, [r3, #26]
 8006fb0:	e015      	b.n	8006fde <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	211a      	movs	r1, #26
 8006fb8:	fb01 f303 	mul.w	r3, r1, r3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006fc2:	781a      	ldrb	r2, [r3, #0]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	211a      	movs	r1, #26
 8006fce:	fb01 f303 	mul.w	r3, r1, r3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006fd8:	881a      	ldrh	r2, [r3, #0]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	7b9b      	ldrb	r3, [r3, #14]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fd8e 	bl	8008b06 <USBH_AllocPipe>
 8006fea:	4603      	mov	r3, r0
 8006fec:	461a      	mov	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	7bdb      	ldrb	r3, [r3, #15]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fd84 	bl	8008b06 <USBH_AllocPipe>
 8006ffe:	4603      	mov	r3, r0
 8007000:	461a      	mov	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	7b59      	ldrb	r1, [r3, #13]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	7b98      	ldrb	r0, [r3, #14]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	8b12      	ldrh	r2, [r2, #24]
 800701e:	9202      	str	r2, [sp, #8]
 8007020:	2202      	movs	r2, #2
 8007022:	9201      	str	r2, [sp, #4]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	4623      	mov	r3, r4
 8007028:	4602      	mov	r2, r0
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fd3c 	bl	8008aa8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	7b19      	ldrb	r1, [r3, #12]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	7bd8      	ldrb	r0, [r3, #15]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	8b52      	ldrh	r2, [r2, #26]
 8007048:	9202      	str	r2, [sp, #8]
 800704a:	2202      	movs	r2, #2
 800704c:	9201      	str	r2, [sp, #4]
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	4623      	mov	r3, r4
 8007052:	4602      	mov	r2, r0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fd27 	bl	8008aa8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	7b5b      	ldrb	r3, [r3, #13]
 8007066:	2200      	movs	r2, #0
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f002 f832 	bl	80090d4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	7b1b      	ldrb	r3, [r3, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f002 f82b 	bl	80090d4 <USBH_LL_SetToggle>

  return USBH_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	bd90      	pop	{r4, r7, pc}

08007088 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00e      	beq.n	80070c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fd1c 	bl	8008ae6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fd47 	bl	8008b48 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	7b1b      	ldrb	r3, [r3, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00e      	beq.n	80070e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	7b1b      	ldrb	r3, [r3, #12]
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fd09 	bl	8008ae6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	7b1b      	ldrb	r3, [r3, #12]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fd34 	bl	8008b48 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	7b5b      	ldrb	r3, [r3, #13]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	7b5b      	ldrb	r3, [r3, #13]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 fcf6 	bl	8008ae6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	7b5b      	ldrb	r3, [r3, #13]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 fd21 	bl	8008b48 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	4618      	mov	r0, r3
 8007122:	f002 f8b9 	bl	8009298 <free>
    phost->pActiveClass->pData = 0U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800712c:	2200      	movs	r2, #0
 800712e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3340      	adds	r3, #64	; 0x40
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f8b1 	bl	80072ba <GetLineCoding>
 8007158:	4603      	mov	r3, r0
 800715a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d105      	bne.n	800716e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007168:	2102      	movs	r1, #2
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800716e:	7afb      	ldrb	r3, [r7, #11]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007198:	2b04      	cmp	r3, #4
 800719a:	d877      	bhi.n	800728c <USBH_CDC_Process+0x114>
 800719c:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <USBH_CDC_Process+0x2c>)
 800719e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a2:	bf00      	nop
 80071a4:	080071b9 	.word	0x080071b9
 80071a8:	080071bf 	.word	0x080071bf
 80071ac:	080071ef 	.word	0x080071ef
 80071b0:	08007263 	.word	0x08007263
 80071b4:	08007271 	.word	0x08007271
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
      break;
 80071bc:	e06d      	b.n	800729a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f897 	bl	80072f8 <SetLineCoding>
 80071ca:	4603      	mov	r3, r0
 80071cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80071dc:	e058      	b.n	8007290 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d055      	beq.n	8007290 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2204      	movs	r2, #4
 80071e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80071ec:	e050      	b.n	8007290 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	3340      	adds	r3, #64	; 0x40
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f860 	bl	80072ba <GetLineCoding>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d126      	bne.n	8007252 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007216:	791b      	ldrb	r3, [r3, #4]
 8007218:	429a      	cmp	r2, r3
 800721a:	d13b      	bne.n	8007294 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007226:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007228:	429a      	cmp	r2, r3
 800722a:	d133      	bne.n	8007294 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007236:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007238:	429a      	cmp	r2, r3
 800723a:	d12b      	bne.n	8007294 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007244:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007246:	429a      	cmp	r2, r3
 8007248:	d124      	bne.n	8007294 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f95a 	bl	8007504 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007250:	e020      	b.n	8007294 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d01d      	beq.n	8007294 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2204      	movs	r2, #4
 800725c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007260:	e018      	b.n	8007294 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f867 	bl	8007336 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f8dc 	bl	8007426 <CDC_ProcessReception>
      break;
 800726e:	e014      	b.n	800729a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007270:	2100      	movs	r1, #0
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 ffe5 	bl	8008242 <USBH_ClrFeature>
 8007278:	4603      	mov	r3, r0
 800727a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800728a:	e005      	b.n	8007298 <USBH_CDC_Process+0x120>

    default:
      break;
 800728c:	bf00      	nop
 800728e:	e004      	b.n	800729a <USBH_CDC_Process+0x122>
      break;
 8007290:	bf00      	nop
 8007292:	e002      	b.n	800729a <USBH_CDC_Process+0x122>
      break;
 8007294:	bf00      	nop
 8007296:	e000      	b.n	800729a <USBH_CDC_Process+0x122>
      break;
 8007298:	bf00      	nop

  }

  return status;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b082      	sub	sp, #8
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	22a1      	movs	r2, #161	; 0xa1
 80072c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2221      	movs	r2, #33	; 0x21
 80072ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2207      	movs	r2, #7
 80072e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2207      	movs	r2, #7
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f001 f98a 	bl	8008602 <USBH_CtlReq>
 80072ee:	4603      	mov	r3, r0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2221      	movs	r2, #33	; 0x21
 8007306:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2207      	movs	r2, #7
 800731e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2207      	movs	r2, #7
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 f96b 	bl	8008602 <USBH_CtlReq>
 800732c:	4603      	mov	r3, r0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af02      	add	r7, sp, #8
 800733c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007348:	2300      	movs	r3, #0
 800734a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007352:	2b01      	cmp	r3, #1
 8007354:	d002      	beq.n	800735c <CDC_ProcessTransmission+0x26>
 8007356:	2b02      	cmp	r3, #2
 8007358:	d025      	beq.n	80073a6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800735a:	e060      	b.n	800741e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	8b12      	ldrh	r2, [r2, #24]
 8007364:	4293      	cmp	r3, r2
 8007366:	d90c      	bls.n	8007382 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	69d9      	ldr	r1, [r3, #28]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8b1a      	ldrh	r2, [r3, #24]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	7b58      	ldrb	r0, [r3, #13]
 8007374:	2301      	movs	r3, #1
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4603      	mov	r3, r0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 fb51 	bl	8008a22 <USBH_BulkSendData>
 8007380:	e00c      	b.n	800739c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	7b58      	ldrb	r0, [r3, #13]
 8007390:	2301      	movs	r3, #1
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	4603      	mov	r3, r0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fb43 	bl	8008a22 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80073a4:	e03b      	b.n	800741e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	7b5b      	ldrb	r3, [r3, #13]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 fe67 	bl	8009080 <USBH_LL_GetURBState>
 80073b2:	4603      	mov	r3, r0
 80073b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d128      	bne.n	800740e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	8b12      	ldrh	r2, [r2, #24]
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d90e      	bls.n	80073e6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	8b12      	ldrh	r2, [r2, #24]
 80073d0:	1a9a      	subs	r2, r3, r2
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	8b12      	ldrh	r2, [r2, #24]
 80073de:	441a      	add	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	61da      	str	r2, [r3, #28]
 80073e4:	e002      	b.n	80073ec <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80073fc:	e00e      	b.n	800741c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f868 	bl	80074dc <USBH_CDC_TransmitCallback>
      break;
 800740c:	e006      	b.n	800741c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d103      	bne.n	800741c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800741c:	bf00      	nop
  }
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b086      	sub	sp, #24
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007438:	2300      	movs	r3, #0
 800743a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007442:	2b03      	cmp	r3, #3
 8007444:	d002      	beq.n	800744c <CDC_ProcessReception+0x26>
 8007446:	2b04      	cmp	r3, #4
 8007448:	d00e      	beq.n	8007468 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800744a:	e043      	b.n	80074d4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	6a19      	ldr	r1, [r3, #32]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	8b5a      	ldrh	r2, [r3, #26]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	7b1b      	ldrb	r3, [r3, #12]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 fb07 	bl	8008a6c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2204      	movs	r2, #4
 8007462:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007466:	e035      	b.n	80074d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	7b1b      	ldrb	r3, [r3, #12]
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 fe06 	bl	8009080 <USBH_LL_GetURBState>
 8007474:	4603      	mov	r3, r0
 8007476:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007478:	7cfb      	ldrb	r3, [r7, #19]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d129      	bne.n	80074d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	7b1b      	ldrb	r3, [r3, #12]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 fd69 	bl	8008f5c <USBH_LL_GetLastXferSize>
 800748a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	429a      	cmp	r2, r3
 8007494:	d016      	beq.n	80074c4 <CDC_ProcessReception+0x9e>
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	8b5b      	ldrh	r3, [r3, #26]
 800749a:	461a      	mov	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d210      	bcs.n	80074c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1ad2      	subs	r2, r2, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	6a1a      	ldr	r2, [r3, #32]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	441a      	add	r2, r3
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2203      	movs	r2, #3
 80074be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80074c2:	e006      	b.n	80074d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f80f 	bl	80074f0 <USBH_CDC_ReceiveCallback>
      break;
 80074d2:	bf00      	nop
  }
}
 80074d4:	bf00      	nop
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800752c:	2302      	movs	r3, #2
 800752e:	e029      	b.n	8007584 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	79fa      	ldrb	r2, [r7, #7]
 8007534:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f81f 	bl	800758c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f001 fc3b 	bl	8008df8 <USBH_LL_Init>

  return USBH_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e009      	b.n	80075b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	33e0      	adds	r3, #224	; 0xe0
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	2200      	movs	r2, #0
 80075aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3301      	adds	r3, #1
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b0e      	cmp	r3, #14
 80075b6:	d9f2      	bls.n	800759e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	e009      	b.n	80075d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3301      	adds	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d8:	d3f1      	bcc.n	80075be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2240      	movs	r2, #64	; 0x40
 80075fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d016      	beq.n	8007676 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10e      	bne.n	8007670 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007658:	1c59      	adds	r1, r3, #1
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	33de      	adds	r3, #222	; 0xde
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]
 800766e:	e004      	b.n	800767a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007670:	2302      	movs	r3, #2
 8007672:	73fb      	strb	r3, [r7, #15]
 8007674:	e001      	b.n	800767a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007676:	2302      	movs	r3, #2
 8007678:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800767a:	7bfb      	ldrb	r3, [r7, #15]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d204      	bcs.n	80076ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	78fa      	ldrb	r2, [r7, #3]
 80076a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80076ac:	e001      	b.n	80076b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80076ae:	2302      	movs	r3, #2
 80076b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	70fb      	strb	r3, [r7, #3]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70bb      	strb	r3, [r7, #2]
 80076d6:	4613      	mov	r3, r2
 80076d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80076e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076ea:	e025      	b.n	8007738 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	221a      	movs	r2, #26
 80076f0:	fb02 f303 	mul.w	r3, r2, r3
 80076f4:	3308      	adds	r3, #8
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	3302      	adds	r3, #2
 80076fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	795b      	ldrb	r3, [r3, #5]
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	429a      	cmp	r2, r3
 8007706:	d002      	beq.n	800770e <USBH_FindInterface+0x4e>
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	2bff      	cmp	r3, #255	; 0xff
 800770c:	d111      	bne.n	8007732 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007712:	78ba      	ldrb	r2, [r7, #2]
 8007714:	429a      	cmp	r2, r3
 8007716:	d002      	beq.n	800771e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007718:	78bb      	ldrb	r3, [r7, #2]
 800771a:	2bff      	cmp	r3, #255	; 0xff
 800771c:	d109      	bne.n	8007732 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007722:	787a      	ldrb	r2, [r7, #1]
 8007724:	429a      	cmp	r2, r3
 8007726:	d002      	beq.n	800772e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007728:	787b      	ldrb	r3, [r7, #1]
 800772a:	2bff      	cmp	r3, #255	; 0xff
 800772c:	d101      	bne.n	8007732 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	e006      	b.n	8007740 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	3301      	adds	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d9d6      	bls.n	80076ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800773e:	23ff      	movs	r3, #255	; 0xff
}
 8007740:	4618      	mov	r0, r3
 8007742:	371c      	adds	r7, #28
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 fb8b 	bl	8008e70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800775a:	2101      	movs	r1, #1
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fca2 	bl	80090a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af04      	add	r7, sp, #16
 8007772:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007774:	2302      	movs	r3, #2
 8007776:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b01      	cmp	r3, #1
 8007786:	d102      	bne.n	800778e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2203      	movs	r2, #3
 800778c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b0b      	cmp	r3, #11
 8007796:	f200 81b3 	bhi.w	8007b00 <USBH_Process+0x394>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <USBH_Process+0x34>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077d1 	.word	0x080077d1
 80077a4:	08007803 	.word	0x08007803
 80077a8:	0800786b 	.word	0x0800786b
 80077ac:	08007a9b 	.word	0x08007a9b
 80077b0:	08007b01 	.word	0x08007b01
 80077b4:	0800790f 	.word	0x0800790f
 80077b8:	08007a41 	.word	0x08007a41
 80077bc:	08007945 	.word	0x08007945
 80077c0:	08007965 	.word	0x08007965
 80077c4:	08007985 	.word	0x08007985
 80077c8:	080079b3 	.word	0x080079b3
 80077cc:	08007a83 	.word	0x08007a83
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 8193 	beq.w	8007b04 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80077e4:	20c8      	movs	r0, #200	; 0xc8
 80077e6:	f001 fca8 	bl	800913a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 fb9b 	bl	8008f26 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007800:	e180      	b.n	8007b04 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007808:	2b01      	cmp	r3, #1
 800780a:	d107      	bne.n	800781c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800781a:	e182      	b.n	8007b22 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007826:	d914      	bls.n	8007852 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800782e:	3301      	adds	r3, #1
 8007830:	b2da      	uxtb	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800783e:	2b03      	cmp	r3, #3
 8007840:	d903      	bls.n	800784a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	220d      	movs	r2, #13
 8007846:	701a      	strb	r2, [r3, #0]
      break;
 8007848:	e16b      	b.n	8007b22 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	701a      	strb	r2, [r3, #0]
      break;
 8007850:	e167      	b.n	8007b22 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007858:	f103 020a 	add.w	r2, r3, #10
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007862:	200a      	movs	r0, #10
 8007864:	f001 fc69 	bl	800913a <USBH_Delay>
      break;
 8007868:	e15b      	b.n	8007b22 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800787a:	2104      	movs	r1, #4
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007880:	2064      	movs	r0, #100	; 0x64
 8007882:	f001 fc5a 	bl	800913a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fb28 	bl	8008edc <USBH_LL_GetSpeed>
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2205      	movs	r2, #5
 800789a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800789c:	2100      	movs	r1, #0
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 f931 	bl	8008b06 <USBH_AllocPipe>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80078ac:	2180      	movs	r1, #128	; 0x80
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 f929 	bl	8008b06 <USBH_AllocPipe>
 80078b4:	4603      	mov	r3, r0
 80078b6:	461a      	mov	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	7919      	ldrb	r1, [r3, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80078d0:	b292      	uxth	r2, r2
 80078d2:	9202      	str	r2, [sp, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	9201      	str	r2, [sp, #4]
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	4603      	mov	r3, r0
 80078dc:	2280      	movs	r2, #128	; 0x80
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f8e2 	bl	8008aa8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	7959      	ldrb	r1, [r3, #5]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078f8:	b292      	uxth	r2, r2
 80078fa:	9202      	str	r2, [sp, #8]
 80078fc:	2200      	movs	r2, #0
 80078fe:	9201      	str	r2, [sp, #4]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	4603      	mov	r3, r0
 8007904:	2200      	movs	r2, #0
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 f8ce 	bl	8008aa8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800790c:	e109      	b.n	8007b22 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f90c 	bl	8007b2c <USBH_HandleEnum>
 8007914:	4603      	mov	r3, r0
 8007916:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	f040 80f3 	bne.w	8007b08 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007930:	2b01      	cmp	r3, #1
 8007932:	d103      	bne.n	800793c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2208      	movs	r2, #8
 8007938:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800793a:	e0e5      	b.n	8007b08 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2207      	movs	r2, #7
 8007940:	701a      	strb	r2, [r3, #0]
      break;
 8007942:	e0e1      	b.n	8007b08 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80de 	beq.w	8007b0c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007956:	2101      	movs	r1, #1
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2208      	movs	r2, #8
 8007960:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007962:	e0d3      	b.n	8007b0c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800796a:	b29b      	uxth	r3, r3
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc20 	bl	80081b4 <USBH_SetCfg>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	f040 80ca 	bne.w	8007b10 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2209      	movs	r2, #9
 8007980:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007982:	e0c5      	b.n	8007b10 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00b      	beq.n	80079aa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007992:	2101      	movs	r1, #1
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc30 	bl	80081fa <USBH_SetFeature>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 80b9 	bne.w	8007b14 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	220a      	movs	r2, #10
 80079a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079a8:	e0b4      	b.n	8007b14 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	220a      	movs	r2, #10
 80079ae:	701a      	strb	r2, [r3, #0]
      break;
 80079b0:	e0b0      	b.n	8007b14 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80ad 	beq.w	8007b18 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]
 80079ca:	e016      	b.n	80079fa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80079cc:	7bfa      	ldrb	r2, [r7, #15]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	32de      	adds	r2, #222	; 0xde
 80079d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d6:	791a      	ldrb	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80079de:	429a      	cmp	r2, r3
 80079e0:	d108      	bne.n	80079f4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80079e2:	7bfa      	ldrb	r2, [r7, #15]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	32de      	adds	r2, #222	; 0xde
 80079e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80079f2:	e005      	b.n	8007a00 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	3301      	adds	r3, #1
 80079f8:	73fb      	strb	r3, [r7, #15]
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0e5      	beq.n	80079cc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d016      	beq.n	8007a38 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2206      	movs	r2, #6
 8007a20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a28:	2103      	movs	r1, #3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a2e:	e073      	b.n	8007b18 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	220d      	movs	r2, #13
 8007a34:	701a      	strb	r2, [r3, #0]
      break;
 8007a36:	e06f      	b.n	8007b18 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	220d      	movs	r2, #13
 8007a3c:	701a      	strb	r2, [r3, #0]
      break;
 8007a3e:	e06b      	b.n	8007b18 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d017      	beq.n	8007a7a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d103      	bne.n	8007a6a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	220b      	movs	r2, #11
 8007a66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a68:	e058      	b.n	8007b1c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d154      	bne.n	8007b1c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	220d      	movs	r2, #13
 8007a76:	701a      	strb	r2, [r3, #0]
      break;
 8007a78:	e050      	b.n	8007b1c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	220d      	movs	r2, #13
 8007a7e:	701a      	strb	r2, [r3, #0]
      break;
 8007a80:	e04c      	b.n	8007b1c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d049      	beq.n	8007b20 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
      }
      break;
 8007a98:	e042      	b.n	8007b20 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fd72 	bl	800758c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d009      	beq.n	8007ac6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ad6:	2105      	movs	r1, #5
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d107      	bne.n	8007af8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff fe2b 	bl	800774c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007af6:	e014      	b.n	8007b22 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f9b9 	bl	8008e70 <USBH_LL_Start>
      break;
 8007afe:	e010      	b.n	8007b22 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007b00:	bf00      	nop
 8007b02:	e00e      	b.n	8007b22 <USBH_Process+0x3b6>
      break;
 8007b04:	bf00      	nop
 8007b06:	e00c      	b.n	8007b22 <USBH_Process+0x3b6>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e00a      	b.n	8007b22 <USBH_Process+0x3b6>
    break;
 8007b0c:	bf00      	nop
 8007b0e:	e008      	b.n	8007b22 <USBH_Process+0x3b6>
      break;
 8007b10:	bf00      	nop
 8007b12:	e006      	b.n	8007b22 <USBH_Process+0x3b6>
      break;
 8007b14:	bf00      	nop
 8007b16:	e004      	b.n	8007b22 <USBH_Process+0x3b6>
      break;
 8007b18:	bf00      	nop
 8007b1a:	e002      	b.n	8007b22 <USBH_Process+0x3b6>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <USBH_Process+0x3b6>
      break;
 8007b20:	bf00      	nop
  }
  return USBH_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af04      	add	r7, sp, #16
 8007b32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b34:	2301      	movs	r3, #1
 8007b36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	2b07      	cmp	r3, #7
 8007b42:	f200 81c1 	bhi.w	8007ec8 <USBH_HandleEnum+0x39c>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <USBH_HandleEnum+0x20>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b6d 	.word	0x08007b6d
 8007b50:	08007c2b 	.word	0x08007c2b
 8007b54:	08007c95 	.word	0x08007c95
 8007b58:	08007d23 	.word	0x08007d23
 8007b5c:	08007d8d 	.word	0x08007d8d
 8007b60:	08007dfd 	.word	0x08007dfd
 8007b64:	08007e43 	.word	0x08007e43
 8007b68:	08007e89 	.word	0x08007e89
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007b6c:	2108      	movs	r1, #8
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa50 	bl	8008014 <USBH_Get_DevDesc>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d130      	bne.n	8007be0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	7919      	ldrb	r1, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	9202      	str	r2, [sp, #8]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	9201      	str	r2, [sp, #4]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	4603      	mov	r3, r0
 8007bae:	2280      	movs	r2, #128	; 0x80
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 ff79 	bl	8008aa8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7959      	ldrb	r1, [r3, #5]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bca:	b292      	uxth	r2, r2
 8007bcc:	9202      	str	r2, [sp, #8]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	9201      	str	r2, [sp, #4]
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 ff65 	bl	8008aa8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bde:	e175      	b.n	8007ecc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	f040 8172 	bne.w	8007ecc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bee:	3301      	adds	r3, #1
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d903      	bls.n	8007c0a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	220d      	movs	r2, #13
 8007c06:	701a      	strb	r2, [r3, #0]
      break;
 8007c08:	e160      	b.n	8007ecc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	795b      	ldrb	r3, [r3, #5]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 ff99 	bl	8008b48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	791b      	ldrb	r3, [r3, #4]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 ff93 	bl	8008b48 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
      break;
 8007c28:	e150      	b.n	8007ecc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007c2a:	2112      	movs	r1, #18
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f9f1 	bl	8008014 <USBH_Get_DevDesc>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d103      	bne.n	8007c44 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c42:	e145      	b.n	8007ed0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	f040 8142 	bne.w	8007ed0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c52:	3301      	adds	r3, #1
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d903      	bls.n	8007c6e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	220d      	movs	r2, #13
 8007c6a:	701a      	strb	r2, [r3, #0]
      break;
 8007c6c:	e130      	b.n	8007ed0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	795b      	ldrb	r3, [r3, #5]
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 ff67 	bl	8008b48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	791b      	ldrb	r3, [r3, #4]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 ff61 	bl	8008b48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	701a      	strb	r2, [r3, #0]
      break;
 8007c92:	e11d      	b.n	8007ed0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007c94:	2101      	movs	r1, #1
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa68 	bl	800816c <USBH_SetAddress>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d132      	bne.n	8007d0c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007ca6:	2002      	movs	r0, #2
 8007ca8:	f001 fa47 	bl	800913a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	7919      	ldrb	r1, [r3, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007cce:	b292      	uxth	r2, r2
 8007cd0:	9202      	str	r2, [sp, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	9201      	str	r2, [sp, #4]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2280      	movs	r2, #128	; 0x80
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fee3 	bl	8008aa8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	7959      	ldrb	r1, [r3, #5]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cf6:	b292      	uxth	r2, r2
 8007cf8:	9202      	str	r2, [sp, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	9201      	str	r2, [sp, #4]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	4603      	mov	r3, r0
 8007d02:	2200      	movs	r2, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fecf 	bl	8008aa8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d0a:	e0e3      	b.n	8007ed4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	f040 80e0 	bne.w	8007ed4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	220d      	movs	r2, #13
 8007d18:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	705a      	strb	r2, [r3, #1]
      break;
 8007d20:	e0d8      	b.n	8007ed4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007d22:	2109      	movs	r1, #9
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f99d 	bl	8008064 <USBH_Get_CfgDesc>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2204      	movs	r2, #4
 8007d38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d3a:	e0cd      	b.n	8007ed8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	f040 80ca 	bne.w	8007ed8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d903      	bls.n	8007d66 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220d      	movs	r2, #13
 8007d62:	701a      	strb	r2, [r3, #0]
      break;
 8007d64:	e0b8      	b.n	8007ed8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	795b      	ldrb	r3, [r3, #5]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 feeb 	bl	8008b48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	791b      	ldrb	r3, [r3, #4]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fee5 	bl	8008b48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
      break;
 8007d8a:	e0a5      	b.n	8007ed8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f965 	bl	8008064 <USBH_Get_CfgDesc>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d103      	bne.n	8007dac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2205      	movs	r2, #5
 8007da8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007daa:	e097      	b.n	8007edc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	f040 8094 	bne.w	8007edc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dba:	3301      	adds	r3, #1
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d903      	bls.n	8007dd6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	220d      	movs	r2, #13
 8007dd2:	701a      	strb	r2, [r3, #0]
      break;
 8007dd4:	e082      	b.n	8007edc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	795b      	ldrb	r3, [r3, #5]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 feb3 	bl	8008b48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	791b      	ldrb	r3, [r3, #4]
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fead 	bl	8008b48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	701a      	strb	r2, [r3, #0]
      break;
 8007dfa:	e06f      	b.n	8007edc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d019      	beq.n	8007e3a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e12:	23ff      	movs	r3, #255	; 0xff
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f949 	bl	80080ac <USBH_Get_StringDesc>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d103      	bne.n	8007e2c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2206      	movs	r2, #6
 8007e28:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e2a:	e059      	b.n	8007ee0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d156      	bne.n	8007ee0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2206      	movs	r2, #6
 8007e36:	705a      	strb	r2, [r3, #1]
      break;
 8007e38:	e052      	b.n	8007ee0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2206      	movs	r2, #6
 8007e3e:	705a      	strb	r2, [r3, #1]
      break;
 8007e40:	e04e      	b.n	8007ee0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d019      	beq.n	8007e80 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e58:	23ff      	movs	r3, #255	; 0xff
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f926 	bl	80080ac <USBH_Get_StringDesc>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2207      	movs	r2, #7
 8007e6e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e70:	e038      	b.n	8007ee4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d135      	bne.n	8007ee4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2207      	movs	r2, #7
 8007e7c:	705a      	strb	r2, [r3, #1]
      break;
 8007e7e:	e031      	b.n	8007ee4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2207      	movs	r2, #7
 8007e84:	705a      	strb	r2, [r3, #1]
      break;
 8007e86:	e02d      	b.n	8007ee4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d017      	beq.n	8007ec2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e9e:	23ff      	movs	r3, #255	; 0xff
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f903 	bl	80080ac <USBH_Get_StringDesc>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d102      	bne.n	8007eb6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007eb4:	e018      	b.n	8007ee8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d115      	bne.n	8007ee8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec0:	e012      	b.n	8007ee8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec6:	e00f      	b.n	8007ee8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007ec8:	bf00      	nop
 8007eca:	e00e      	b.n	8007eea <USBH_HandleEnum+0x3be>
      break;
 8007ecc:	bf00      	nop
 8007ece:	e00c      	b.n	8007eea <USBH_HandleEnum+0x3be>
      break;
 8007ed0:	bf00      	nop
 8007ed2:	e00a      	b.n	8007eea <USBH_HandleEnum+0x3be>
      break;
 8007ed4:	bf00      	nop
 8007ed6:	e008      	b.n	8007eea <USBH_HandleEnum+0x3be>
      break;
 8007ed8:	bf00      	nop
 8007eda:	e006      	b.n	8007eea <USBH_HandleEnum+0x3be>
      break;
 8007edc:	bf00      	nop
 8007ede:	e004      	b.n	8007eea <USBH_HandleEnum+0x3be>
      break;
 8007ee0:	bf00      	nop
 8007ee2:	e002      	b.n	8007eea <USBH_HandleEnum+0x3be>
      break;
 8007ee4:	bf00      	nop
 8007ee6:	e000      	b.n	8007eea <USBH_HandleEnum+0x3be>
      break;
 8007ee8:	bf00      	nop
  }
  return Status;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f804 	bl	8007f36 <USBH_HandleSof>
}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b0b      	cmp	r3, #11
 8007f46:	d10a      	bne.n	8007f5e <USBH_HandleSof+0x28>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	4798      	blx	r3
  }
}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007f76:	bf00      	nop
}
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007f92:	bf00      	nop
}
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 ff5a 	bl	8008ea6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fda5 	bl	8008b48 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	795b      	ldrb	r3, [r3, #5]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fd9f 	bl	8008b48 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af02      	add	r7, sp, #8
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	b29b      	uxth	r3, r3
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008032:	2100      	movs	r1, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f864 	bl	8008102 <USBH_GetDescriptor>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f203 3026 	addw	r0, r3, #806	; 0x326
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	b292      	uxth	r2, r2
 8008054:	4619      	mov	r1, r3
 8008056:	f000 f918 	bl	800828a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af02      	add	r7, sp, #8
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	331c      	adds	r3, #28
 8008074:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008076:	887b      	ldrh	r3, [r7, #2]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008080:	2100      	movs	r1, #0
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f83d 	bl	8008102 <USBH_GetDescriptor>
 8008088:	4603      	mov	r3, r0
 800808a:	72fb      	strb	r3, [r7, #11]
 800808c:	7afb      	ldrb	r3, [r7, #11]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d107      	bne.n	80080a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008098:	887a      	ldrh	r2, [r7, #2]
 800809a:	68f9      	ldr	r1, [r7, #12]
 800809c:	4618      	mov	r0, r3
 800809e:	f000 f964 	bl	800836a <USBH_ParseCfgDesc>
  }

  return status;
 80080a2:	7afb      	ldrb	r3, [r7, #11]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	607a      	str	r2, [r7, #4]
 80080b6:	461a      	mov	r2, r3
 80080b8:	460b      	mov	r3, r1
 80080ba:	72fb      	strb	r3, [r7, #11]
 80080bc:	4613      	mov	r3, r2
 80080be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80080c0:	7afb      	ldrb	r3, [r7, #11]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80080c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80080d0:	893b      	ldrh	r3, [r7, #8]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	460b      	mov	r3, r1
 80080d6:	2100      	movs	r1, #0
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f812 	bl	8008102 <USBH_GetDescriptor>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d107      	bne.n	80080f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080ee:	893a      	ldrh	r2, [r7, #8]
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 fa37 	bl	8008566 <USBH_ParseStringDesc>
  }

  return status;
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	72fb      	strb	r3, [r7, #11]
 8008110:	4613      	mov	r3, r2
 8008112:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	789b      	ldrb	r3, [r3, #2]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d11c      	bne.n	8008156 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800811c:	7afb      	ldrb	r3, [r7, #11]
 800811e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008122:	b2da      	uxtb	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2206      	movs	r2, #6
 800812c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	893a      	ldrh	r2, [r7, #8]
 8008132:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008134:	893b      	ldrh	r3, [r7, #8]
 8008136:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800813a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800813e:	d104      	bne.n	800814a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f240 4209 	movw	r2, #1033	; 0x409
 8008146:	829a      	strh	r2, [r3, #20]
 8008148:	e002      	b.n	8008150 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8b3a      	ldrh	r2, [r7, #24]
 8008154:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008156:	8b3b      	ldrh	r3, [r7, #24]
 8008158:	461a      	mov	r2, r3
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 fa50 	bl	8008602 <USBH_CtlReq>
 8008162:	4603      	mov	r3, r0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	789b      	ldrb	r3, [r3, #2]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d10f      	bne.n	80081a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2205      	movs	r2, #5
 800818a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80081a0:	2200      	movs	r2, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fa2c 	bl	8008602 <USBH_CtlReq>
 80081aa:	4603      	mov	r3, r0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	789b      	ldrb	r3, [r3, #2]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d10e      	bne.n	80081e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2209      	movs	r2, #9
 80081d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	887a      	ldrh	r2, [r7, #2]
 80081d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80081e6:	2200      	movs	r2, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa09 	bl	8008602 <USBH_CtlReq>
 80081f0:	4603      	mov	r3, r0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	789b      	ldrb	r3, [r3, #2]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d10f      	bne.n	800822e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2203      	movs	r2, #3
 8008218:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	b29a      	uxth	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800822e:	2200      	movs	r2, #0
 8008230:	2100      	movs	r1, #0
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f9e5 	bl	8008602 <USBH_CtlReq>
 8008238:	4603      	mov	r3, r0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	789b      	ldrb	r3, [r3, #2]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d10f      	bne.n	8008276 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2202      	movs	r2, #2
 800825a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	b29a      	uxth	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008276:	2200      	movs	r2, #0
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f9c1 	bl	8008602 <USBH_CtlReq>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	4613      	mov	r3, r2
 8008296:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	781a      	ldrb	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	785a      	ldrb	r2, [r3, #1]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	3302      	adds	r3, #2
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	3303      	adds	r3, #3
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	4313      	orrs	r3, r2
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	791a      	ldrb	r2, [r3, #4]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	795a      	ldrb	r2, [r3, #5]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	799a      	ldrb	r2, [r3, #6]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	79da      	ldrb	r2, [r3, #7]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	d939      	bls.n	800835e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3308      	adds	r3, #8
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	3309      	adds	r3, #9
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	4313      	orrs	r3, r2
 8008300:	b29a      	uxth	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	330a      	adds	r3, #10
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b29a      	uxth	r2, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	330b      	adds	r3, #11
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	b29b      	uxth	r3, r3
 800831a:	4313      	orrs	r3, r2
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	330c      	adds	r3, #12
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	b29a      	uxth	r2, r3
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	330d      	adds	r3, #13
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	b29b      	uxth	r3, r3
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	b29b      	uxth	r3, r3
 8008336:	4313      	orrs	r3, r2
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	7b9a      	ldrb	r2, [r3, #14]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	7bda      	ldrb	r2, [r3, #15]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	7c1a      	ldrb	r2, [r3, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	7c5a      	ldrb	r2, [r3, #17]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	745a      	strb	r2, [r3, #17]
  }
}
 800835e:	bf00      	nop
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b08a      	sub	sp, #40	; 0x28
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	4613      	mov	r3, r2
 8008376:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	781a      	ldrb	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	785a      	ldrb	r2, [r3, #1]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	3302      	adds	r3, #2
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	3303      	adds	r3, #3
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	4313      	orrs	r3, r2
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	791a      	ldrb	r2, [r3, #4]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	795a      	ldrb	r2, [r3, #5]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	799a      	ldrb	r2, [r3, #6]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	79da      	ldrb	r2, [r3, #7]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	7a1a      	ldrb	r2, [r3, #8]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80083e0:	88fb      	ldrh	r3, [r7, #6]
 80083e2:	2b09      	cmp	r3, #9
 80083e4:	d95f      	bls.n	80084a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80083e6:	2309      	movs	r3, #9
 80083e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083ee:	e051      	b.n	8008494 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083f0:	f107 0316 	add.w	r3, r7, #22
 80083f4:	4619      	mov	r1, r3
 80083f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083f8:	f000 f8e8 	bl	80085cc <USBH_GetNextDesc>
 80083fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	2b04      	cmp	r3, #4
 8008404:	d146      	bne.n	8008494 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008406:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800840a:	221a      	movs	r2, #26
 800840c:	fb02 f303 	mul.w	r3, r2, r3
 8008410:	3308      	adds	r3, #8
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4413      	add	r3, r2
 8008416:	3302      	adds	r3, #2
 8008418:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800841a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800841c:	69f8      	ldr	r0, [r7, #28]
 800841e:	f000 f846 	bl	80084ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008428:	2300      	movs	r3, #0
 800842a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800842c:	e022      	b.n	8008474 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800842e:	f107 0316 	add.w	r3, r7, #22
 8008432:	4619      	mov	r1, r3
 8008434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008436:	f000 f8c9 	bl	80085cc <USBH_GetNextDesc>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	785b      	ldrb	r3, [r3, #1]
 8008440:	2b05      	cmp	r3, #5
 8008442:	d117      	bne.n	8008474 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008448:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800844c:	3201      	adds	r2, #1
 800844e:	00d2      	lsls	r2, r2, #3
 8008450:	211a      	movs	r1, #26
 8008452:	fb01 f303 	mul.w	r3, r1, r3
 8008456:	4413      	add	r3, r2
 8008458:	3308      	adds	r3, #8
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4413      	add	r3, r2
 800845e:	3304      	adds	r3, #4
 8008460:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008464:	69b8      	ldr	r0, [r7, #24]
 8008466:	f000 f851 	bl	800850c <USBH_ParseEPDesc>
            ep_ix++;
 800846a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800846e:	3301      	adds	r3, #1
 8008470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	791b      	ldrb	r3, [r3, #4]
 8008478:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800847c:	429a      	cmp	r2, r3
 800847e:	d204      	bcs.n	800848a <USBH_ParseCfgDesc+0x120>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	885a      	ldrh	r2, [r3, #2]
 8008484:	8afb      	ldrh	r3, [r7, #22]
 8008486:	429a      	cmp	r2, r3
 8008488:	d8d1      	bhi.n	800842e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800848a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800848e:	3301      	adds	r3, #1
 8008490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008498:	2b01      	cmp	r3, #1
 800849a:	d804      	bhi.n	80084a6 <USBH_ParseCfgDesc+0x13c>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	885a      	ldrh	r2, [r3, #2]
 80084a0:	8afb      	ldrh	r3, [r7, #22]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d8a4      	bhi.n	80083f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80084a6:	bf00      	nop
 80084a8:	3728      	adds	r7, #40	; 0x28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781a      	ldrb	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	785a      	ldrb	r2, [r3, #1]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	789a      	ldrb	r2, [r3, #2]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	78da      	ldrb	r2, [r3, #3]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	791a      	ldrb	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	795a      	ldrb	r2, [r3, #5]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	799a      	ldrb	r2, [r3, #6]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	79da      	ldrb	r2, [r3, #7]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	7a1a      	ldrb	r2, [r3, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	721a      	strb	r2, [r3, #8]
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781a      	ldrb	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	785a      	ldrb	r2, [r3, #1]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	789a      	ldrb	r2, [r3, #2]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	78da      	ldrb	r2, [r3, #3]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	3304      	adds	r3, #4
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b29a      	uxth	r2, r3
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	3305      	adds	r3, #5
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	b29b      	uxth	r3, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	799a      	ldrb	r2, [r3, #6]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	719a      	strb	r2, [r3, #6]
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008566:	b480      	push	{r7}
 8008568:	b087      	sub	sp, #28
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	4613      	mov	r3, r2
 8008572:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3301      	adds	r3, #1
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b03      	cmp	r3, #3
 800857c:	d120      	bne.n	80085c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	1e9a      	subs	r2, r3, #2
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	4293      	cmp	r3, r2
 8008588:	bf28      	it	cs
 800858a:	4613      	movcs	r3, r2
 800858c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3302      	adds	r3, #2
 8008592:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008594:	2300      	movs	r3, #0
 8008596:	82fb      	strh	r3, [r7, #22]
 8008598:	e00b      	b.n	80085b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800859a:	8afb      	ldrh	r3, [r7, #22]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	781a      	ldrb	r2, [r3, #0]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	3301      	adds	r3, #1
 80085aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80085ac:	8afb      	ldrh	r3, [r7, #22]
 80085ae:	3302      	adds	r3, #2
 80085b0:	82fb      	strh	r3, [r7, #22]
 80085b2:	8afa      	ldrh	r2, [r7, #22]
 80085b4:	8abb      	ldrh	r3, [r7, #20]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d3ef      	bcc.n	800859a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2200      	movs	r2, #0
 80085be:	701a      	strb	r2, [r3, #0]
  }
}
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	4413      	add	r3, r2
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4413      	add	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80085f4:	68fb      	ldr	r3, [r7, #12]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b086      	sub	sp, #24
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	4613      	mov	r3, r2
 800860e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008610:	2301      	movs	r3, #1
 8008612:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	789b      	ldrb	r3, [r3, #2]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d002      	beq.n	8008622 <USBH_CtlReq+0x20>
 800861c:	2b02      	cmp	r3, #2
 800861e:	d00f      	beq.n	8008640 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008620:	e027      	b.n	8008672 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2202      	movs	r2, #2
 8008638:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
      break;
 800863e:	e018      	b.n	8008672 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 f81b 	bl	800867c <USBH_HandleControl>
 8008646:	4603      	mov	r3, r0
 8008648:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <USBH_CtlReq+0x54>
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	2b03      	cmp	r3, #3
 8008654:	d106      	bne.n	8008664 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	761a      	strb	r2, [r3, #24]
      break;
 8008662:	e005      	b.n	8008670 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d102      	bne.n	8008670 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	709a      	strb	r2, [r3, #2]
      break;
 8008670:	bf00      	nop
  }
  return status;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af02      	add	r7, sp, #8
 8008682:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008684:	2301      	movs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008688:	2300      	movs	r3, #0
 800868a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7e1b      	ldrb	r3, [r3, #24]
 8008690:	3b01      	subs	r3, #1
 8008692:	2b0a      	cmp	r3, #10
 8008694:	f200 8158 	bhi.w	8008948 <USBH_HandleControl+0x2cc>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <USBH_HandleControl+0x24>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086cd 	.word	0x080086cd
 80086a4:	080086e7 	.word	0x080086e7
 80086a8:	08008751 	.word	0x08008751
 80086ac:	08008777 	.word	0x08008777
 80086b0:	080087af 	.word	0x080087af
 80086b4:	080087db 	.word	0x080087db
 80086b8:	0800882d 	.word	0x0800882d
 80086bc:	0800884f 	.word	0x0800884f
 80086c0:	0800888b 	.word	0x0800888b
 80086c4:	080088b3 	.word	0x080088b3
 80086c8:	080088f1 	.word	0x080088f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f103 0110 	add.w	r1, r3, #16
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	795b      	ldrb	r3, [r3, #5]
 80086d6:	461a      	mov	r2, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f945 	bl	8008968 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2202      	movs	r2, #2
 80086e2:	761a      	strb	r2, [r3, #24]
      break;
 80086e4:	e13b      	b.n	800895e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	795b      	ldrb	r3, [r3, #5]
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fcc7 	bl	8009080 <USBH_LL_GetURBState>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d11e      	bne.n	800873a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7c1b      	ldrb	r3, [r3, #16]
 8008700:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008704:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	8adb      	ldrh	r3, [r3, #22]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800870e:	7b7b      	ldrb	r3, [r7, #13]
 8008710:	2b80      	cmp	r3, #128	; 0x80
 8008712:	d103      	bne.n	800871c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2203      	movs	r2, #3
 8008718:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800871a:	e117      	b.n	800894c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2205      	movs	r2, #5
 8008720:	761a      	strb	r2, [r3, #24]
      break;
 8008722:	e113      	b.n	800894c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008724:	7b7b      	ldrb	r3, [r7, #13]
 8008726:	2b80      	cmp	r3, #128	; 0x80
 8008728:	d103      	bne.n	8008732 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2209      	movs	r2, #9
 800872e:	761a      	strb	r2, [r3, #24]
      break;
 8008730:	e10c      	b.n	800894c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2207      	movs	r2, #7
 8008736:	761a      	strb	r2, [r3, #24]
      break;
 8008738:	e108      	b.n	800894c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	2b04      	cmp	r3, #4
 800873e:	d003      	beq.n	8008748 <USBH_HandleControl+0xcc>
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	2b02      	cmp	r3, #2
 8008744:	f040 8102 	bne.w	800894c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	220b      	movs	r2, #11
 800874c:	761a      	strb	r2, [r3, #24]
      break;
 800874e:	e0fd      	b.n	800894c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008756:	b29a      	uxth	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6899      	ldr	r1, [r3, #8]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	899a      	ldrh	r2, [r3, #12]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	791b      	ldrb	r3, [r3, #4]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f93c 	bl	80089e6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2204      	movs	r2, #4
 8008772:	761a      	strb	r2, [r3, #24]
      break;
 8008774:	e0f3      	b.n	800895e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	791b      	ldrb	r3, [r3, #4]
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fc7f 	bl	8009080 <USBH_LL_GetURBState>
 8008782:	4603      	mov	r3, r0
 8008784:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d102      	bne.n	8008792 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2209      	movs	r2, #9
 8008790:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	2b05      	cmp	r3, #5
 8008796:	d102      	bne.n	800879e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008798:	2303      	movs	r3, #3
 800879a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800879c:	e0d8      	b.n	8008950 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	f040 80d5 	bne.w	8008950 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	220b      	movs	r2, #11
 80087aa:	761a      	strb	r2, [r3, #24]
      break;
 80087ac:	e0d0      	b.n	8008950 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6899      	ldr	r1, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	899a      	ldrh	r2, [r3, #12]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7958      	ldrb	r0, [r3, #5]
 80087ba:	2301      	movs	r3, #1
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	4603      	mov	r3, r0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f8eb 	bl	800899c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2206      	movs	r2, #6
 80087d6:	761a      	strb	r2, [r3, #24]
      break;
 80087d8:	e0c1      	b.n	800895e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	795b      	ldrb	r3, [r3, #5]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fc4d 	bl	8009080 <USBH_LL_GetURBState>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d103      	bne.n	80087f8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2207      	movs	r2, #7
 80087f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087f6:	e0ad      	b.n	8008954 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b05      	cmp	r3, #5
 80087fc:	d105      	bne.n	800880a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	220c      	movs	r2, #12
 8008802:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008804:	2303      	movs	r3, #3
 8008806:	73fb      	strb	r3, [r7, #15]
      break;
 8008808:	e0a4      	b.n	8008954 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d103      	bne.n	8008818 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2205      	movs	r2, #5
 8008814:	761a      	strb	r2, [r3, #24]
      break;
 8008816:	e09d      	b.n	8008954 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b04      	cmp	r3, #4
 800881c:	f040 809a 	bne.w	8008954 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	220b      	movs	r2, #11
 8008824:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008826:	2302      	movs	r3, #2
 8008828:	73fb      	strb	r3, [r7, #15]
      break;
 800882a:	e093      	b.n	8008954 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	791b      	ldrb	r3, [r3, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	2100      	movs	r1, #0
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f8d6 	bl	80089e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008840:	b29a      	uxth	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2208      	movs	r2, #8
 800884a:	761a      	strb	r2, [r3, #24]

      break;
 800884c:	e087      	b.n	800895e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	791b      	ldrb	r3, [r3, #4]
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fc13 	bl	8009080 <USBH_LL_GetURBState>
 800885a:	4603      	mov	r3, r0
 800885c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d105      	bne.n	8008870 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	220d      	movs	r2, #13
 8008868:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800886e:	e073      	b.n	8008958 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b04      	cmp	r3, #4
 8008874:	d103      	bne.n	800887e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	220b      	movs	r2, #11
 800887a:	761a      	strb	r2, [r3, #24]
      break;
 800887c:	e06c      	b.n	8008958 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	2b05      	cmp	r3, #5
 8008882:	d169      	bne.n	8008958 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008884:	2303      	movs	r3, #3
 8008886:	73fb      	strb	r3, [r7, #15]
      break;
 8008888:	e066      	b.n	8008958 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	795a      	ldrb	r2, [r3, #5]
 800888e:	2301      	movs	r3, #1
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	4613      	mov	r3, r2
 8008894:	2200      	movs	r2, #0
 8008896:	2100      	movs	r1, #0
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f87f 	bl	800899c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	220a      	movs	r2, #10
 80088ae:	761a      	strb	r2, [r3, #24]
      break;
 80088b0:	e055      	b.n	800895e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	795b      	ldrb	r3, [r3, #5]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fbe1 	bl	8009080 <USBH_LL_GetURBState>
 80088be:	4603      	mov	r3, r0
 80088c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d105      	bne.n	80088d4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	220d      	movs	r2, #13
 80088d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088d2:	e043      	b.n	800895c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d103      	bne.n	80088e2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2209      	movs	r2, #9
 80088de:	761a      	strb	r2, [r3, #24]
      break;
 80088e0:	e03c      	b.n	800895c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d139      	bne.n	800895c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	220b      	movs	r2, #11
 80088ec:	761a      	strb	r2, [r3, #24]
      break;
 80088ee:	e035      	b.n	800895c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7e5b      	ldrb	r3, [r3, #25]
 80088f4:	3301      	adds	r3, #1
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	765a      	strb	r2, [r3, #25]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	7e5b      	ldrb	r3, [r3, #25]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d806      	bhi.n	8008912 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008910:	e025      	b.n	800895e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008918:	2106      	movs	r1, #6
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	795b      	ldrb	r3, [r3, #5]
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f90c 	bl	8008b48 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	791b      	ldrb	r3, [r3, #4]
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f906 	bl	8008b48 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008942:	2302      	movs	r3, #2
 8008944:	73fb      	strb	r3, [r7, #15]
      break;
 8008946:	e00a      	b.n	800895e <USBH_HandleControl+0x2e2>

    default:
      break;
 8008948:	bf00      	nop
 800894a:	e008      	b.n	800895e <USBH_HandleControl+0x2e2>
      break;
 800894c:	bf00      	nop
 800894e:	e006      	b.n	800895e <USBH_HandleControl+0x2e2>
      break;
 8008950:	bf00      	nop
 8008952:	e004      	b.n	800895e <USBH_HandleControl+0x2e2>
      break;
 8008954:	bf00      	nop
 8008956:	e002      	b.n	800895e <USBH_HandleControl+0x2e2>
      break;
 8008958:	bf00      	nop
 800895a:	e000      	b.n	800895e <USBH_HandleControl+0x2e2>
      break;
 800895c:	bf00      	nop
  }

  return status;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af04      	add	r7, sp, #16
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008976:	79f9      	ldrb	r1, [r7, #7]
 8008978:	2300      	movs	r3, #0
 800897a:	9303      	str	r3, [sp, #12]
 800897c:	2308      	movs	r3, #8
 800897e:	9302      	str	r3, [sp, #8]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	2300      	movs	r3, #0
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	2300      	movs	r3, #0
 800898a:	2200      	movs	r2, #0
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 fb46 	bl	800901e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af04      	add	r7, sp, #16
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	4611      	mov	r1, r2
 80089a8:	461a      	mov	r2, r3
 80089aa:	460b      	mov	r3, r1
 80089ac:	80fb      	strh	r3, [r7, #6]
 80089ae:	4613      	mov	r3, r2
 80089b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089c0:	7979      	ldrb	r1, [r7, #5]
 80089c2:	7e3b      	ldrb	r3, [r7, #24]
 80089c4:	9303      	str	r3, [sp, #12]
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	9302      	str	r3, [sp, #8]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	2301      	movs	r3, #1
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	2300      	movs	r3, #0
 80089d4:	2200      	movs	r2, #0
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 fb21 	bl	800901e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b088      	sub	sp, #32
 80089ea:	af04      	add	r7, sp, #16
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	4611      	mov	r1, r2
 80089f2:	461a      	mov	r2, r3
 80089f4:	460b      	mov	r3, r1
 80089f6:	80fb      	strh	r3, [r7, #6]
 80089f8:	4613      	mov	r3, r2
 80089fa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089fc:	7979      	ldrb	r1, [r7, #5]
 80089fe:	2300      	movs	r3, #0
 8008a00:	9303      	str	r3, [sp, #12]
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	9302      	str	r3, [sp, #8]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2201      	movs	r2, #1
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fb03 	bl	800901e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008a18:	2300      	movs	r3, #0

}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b088      	sub	sp, #32
 8008a26:	af04      	add	r7, sp, #16
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	461a      	mov	r2, r3
 8008a30:	460b      	mov	r3, r1
 8008a32:	80fb      	strh	r3, [r7, #6]
 8008a34:	4613      	mov	r3, r2
 8008a36:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a46:	7979      	ldrb	r1, [r7, #5]
 8008a48:	7e3b      	ldrb	r3, [r7, #24]
 8008a4a:	9303      	str	r3, [sp, #12]
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	9302      	str	r3, [sp, #8]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	2301      	movs	r3, #1
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	2302      	movs	r3, #2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fade 	bl	800901e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af04      	add	r7, sp, #16
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4611      	mov	r1, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	80fb      	strh	r3, [r7, #6]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a82:	7979      	ldrb	r1, [r7, #5]
 8008a84:	2300      	movs	r3, #0
 8008a86:	9303      	str	r3, [sp, #12]
 8008a88:	88fb      	ldrh	r3, [r7, #6]
 8008a8a:	9302      	str	r3, [sp, #8]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	2301      	movs	r3, #1
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	2302      	movs	r3, #2
 8008a96:	2201      	movs	r2, #1
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 fac0 	bl	800901e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af04      	add	r7, sp, #16
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	70fb      	strb	r3, [r7, #3]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70bb      	strb	r3, [r7, #2]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008ac2:	7878      	ldrb	r0, [r7, #1]
 8008ac4:	78ba      	ldrb	r2, [r7, #2]
 8008ac6:	78f9      	ldrb	r1, [r7, #3]
 8008ac8:	8b3b      	ldrh	r3, [r7, #24]
 8008aca:	9302      	str	r3, [sp, #8]
 8008acc:	7d3b      	ldrb	r3, [r7, #20]
 8008ace:	9301      	str	r3, [sp, #4]
 8008ad0:	7c3b      	ldrb	r3, [r7, #16]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa53 	bl	8008f82 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fa72 	bl	8008fe0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f837 	bl	8008b86 <USBH_GetFreePipe>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b1c:	89fb      	ldrh	r3, [r7, #14]
 8008b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00a      	beq.n	8008b3c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008b26:	89fb      	ldrh	r3, [r7, #14]
 8008b28:	f003 030f 	and.w	r3, r3, #15
 8008b2c:	78fa      	ldrb	r2, [r7, #3]
 8008b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	33e0      	adds	r3, #224	; 0xe0
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008b3c:	89fb      	ldrh	r3, [r7, #14]
 8008b3e:	b2db      	uxtb	r3, r3
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	2b0a      	cmp	r3, #10
 8008b58:	d80e      	bhi.n	8008b78 <USBH_FreePipe+0x30>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008b5a:	78f8      	ldrb	r0, [r7, #3]
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	33e0      	adds	r3, #224	; 0xe0
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]
 8008b96:	e00f      	b.n	8008bb8 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	33e0      	adds	r3, #224	; 0xe0
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	e007      	b.n	8008bc2 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	73fb      	strb	r3, [r7, #15]
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	2b0a      	cmp	r3, #10
 8008bbc:	d9ec      	bls.n	8008b98 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
	...

08008bd0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	490e      	ldr	r1, [pc, #56]	; (8008c10 <MX_USB_HOST_Init+0x40>)
 8008bd8:	480e      	ldr	r0, [pc, #56]	; (8008c14 <MX_USB_HOST_Init+0x44>)
 8008bda:	f7fe fc9d 	bl	8007518 <USBH_Init>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008be4:	f7f7 ffde 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008be8:	490b      	ldr	r1, [pc, #44]	; (8008c18 <MX_USB_HOST_Init+0x48>)
 8008bea:	480a      	ldr	r0, [pc, #40]	; (8008c14 <MX_USB_HOST_Init+0x44>)
 8008bec:	f7fe fd22 	bl	8007634 <USBH_RegisterClass>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008bf6:	f7f7 ffd5 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008bfa:	4806      	ldr	r0, [pc, #24]	; (8008c14 <MX_USB_HOST_Init+0x44>)
 8008bfc:	f7fe fda6 	bl	800774c <USBH_Start>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c06:	f7f7 ffcd 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008c0a:	bf00      	nop
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	08008c31 	.word	0x08008c31
 8008c14:	20000278 	.word	0x20000278
 8008c18:	2000000c 	.word	0x2000000c

08008c1c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008c20:	4802      	ldr	r0, [pc, #8]	; (8008c2c <MX_USB_HOST_Process+0x10>)
 8008c22:	f7fe fda3 	bl	800776c <USBH_Process>
}
 8008c26:	bf00      	nop
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000278 	.word	0x20000278

08008c30 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d819      	bhi.n	8008c78 <USBH_UserProcess+0x48>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <USBH_UserProcess+0x1c>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c79 	.word	0x08008c79
 8008c50:	08008c69 	.word	0x08008c69
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c71 	.word	0x08008c71
 8008c5c:	08008c61 	.word	0x08008c61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008c60:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <USBH_UserProcess+0x58>)
 8008c62:	2203      	movs	r2, #3
 8008c64:	701a      	strb	r2, [r3, #0]
  break;
 8008c66:	e008      	b.n	8008c7a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c68:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <USBH_UserProcess+0x58>)
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	701a      	strb	r2, [r3, #0]
  break;
 8008c6e:	e004      	b.n	8008c7a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008c70:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <USBH_UserProcess+0x58>)
 8008c72:	2201      	movs	r2, #1
 8008c74:	701a      	strb	r2, [r3, #0]
  break;
 8008c76:	e000      	b.n	8008c7a <USBH_UserProcess+0x4a>

  default:
  break;
 8008c78:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	200000b4 	.word	0x200000b4

08008c8c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	; 0x28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c94:	f107 0314 	add.w	r3, r7, #20
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	605a      	str	r2, [r3, #4]
 8008c9e:	609a      	str	r2, [r3, #8]
 8008ca0:	60da      	str	r2, [r3, #12]
 8008ca2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cac:	d147      	bne.n	8008d3e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
 8008cb2:	4a25      	ldr	r2, [pc, #148]	; (8008d48 <HAL_HCD_MspInit+0xbc>)
 8008cb4:	4b24      	ldr	r3, [pc, #144]	; (8008d48 <HAL_HCD_MspInit+0xbc>)
 8008cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb8:	f043 0301 	orr.w	r3, r3, #1
 8008cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cbe:	4b22      	ldr	r3, [pc, #136]	; (8008d48 <HAL_HCD_MspInit+0xbc>)
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	613b      	str	r3, [r7, #16]
 8008cc8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008cd8:	f107 0314 	add.w	r3, r7, #20
 8008cdc:	4619      	mov	r1, r3
 8008cde:	481b      	ldr	r0, [pc, #108]	; (8008d4c <HAL_HCD_MspInit+0xc0>)
 8008ce0:	f7f8 fc58 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ce4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cea:	2302      	movs	r3, #2
 8008cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cf6:	230a      	movs	r3, #10
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cfa:	f107 0314 	add.w	r3, r7, #20
 8008cfe:	4619      	mov	r1, r3
 8008d00:	4812      	ldr	r0, [pc, #72]	; (8008d4c <HAL_HCD_MspInit+0xc0>)
 8008d02:	f7f8 fc47 	bl	8001594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d06:	4a10      	ldr	r2, [pc, #64]	; (8008d48 <HAL_HCD_MspInit+0xbc>)
 8008d08:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <HAL_HCD_MspInit+0xbc>)
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d10:	6353      	str	r3, [r2, #52]	; 0x34
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	4a0c      	ldr	r2, [pc, #48]	; (8008d48 <HAL_HCD_MspInit+0xbc>)
 8008d18:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <HAL_HCD_MspInit+0xbc>)
 8008d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d20:	6453      	str	r3, [r2, #68]	; 0x44
 8008d22:	4b09      	ldr	r3, [pc, #36]	; (8008d48 <HAL_HCD_MspInit+0xbc>)
 8008d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2100      	movs	r1, #0
 8008d32:	2043      	movs	r0, #67	; 0x43
 8008d34:	f7f8 fbf7 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d38:	2043      	movs	r0, #67	; 0x43
 8008d3a:	f7f8 fc10 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d3e:	bf00      	nop
 8008d40:	3728      	adds	r7, #40	; 0x28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	40023800 	.word	0x40023800
 8008d4c:	40020000 	.word	0x40020000

08008d50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff f8d7 	bl	8007f12 <USBH_LL_IncTimer>
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff f90f 	bl	8007f9e <USBH_LL_Connect>
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff f918 	bl	8007fcc <USBH_LL_Disconnect>
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
 8008db0:	4613      	mov	r3, r2
 8008db2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff f8c9 	bl	8007f66 <USBH_LL_PortEnabled>
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff f8c9 	bl	8007f82 <USBH_LL_PortDisabled>
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d12a      	bne.n	8008e60 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008e0a:	4a18      	ldr	r2, [pc, #96]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a15      	ldr	r2, [pc, #84]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e16:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e1a:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e20:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008e22:	4b12      	ldr	r3, [pc, #72]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e24:	2208      	movs	r2, #8
 8008e26:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008e28:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e2e:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008e34:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e36:	2202      	movs	r2, #2
 8008e38:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e3a:	4b0c      	ldr	r3, [pc, #48]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008e40:	480a      	ldr	r0, [pc, #40]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e42:	f7f8 fd5a 	bl	80018fa <HAL_HCD_Init>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008e4c:	f7f7 feaa 	bl	8000ba4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008e50:	4806      	ldr	r0, [pc, #24]	; (8008e6c <USBH_LL_Init+0x74>)
 8008e52:	f7f9 f95d 	bl	8002110 <HAL_HCD_GetCurrentFrame>
 8008e56:	4603      	mov	r3, r0
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff f84a 	bl	8007ef4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000650 	.word	0x20000650

08008e70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7f9 f8ca 	bl	8002020 <HAL_HCD_Start>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 f95c 	bl	8009150 <USBH_Get_USB_Status>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7f9 f8d2 	bl	8002066 <HAL_HCD_Stop>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 f941 	bl	8009150 <USBH_Get_USB_Status>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f9 f91c 	bl	800212c <HAL_HCD_GetCurrentSpeed>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d007      	beq.n	8008f0a <USBH_LL_GetSpeed+0x2e>
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d302      	bcc.n	8008f04 <USBH_LL_GetSpeed+0x28>
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d006      	beq.n	8008f10 <USBH_LL_GetSpeed+0x34>
 8008f02:	e008      	b.n	8008f16 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
    break;
 8008f08:	e008      	b.n	8008f1c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0e:	e005      	b.n	8008f1c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008f10:	2302      	movs	r3, #2
 8008f12:	73fb      	strb	r3, [r7, #15]
    break;
 8008f14:	e002      	b.n	8008f1c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008f16:	2301      	movs	r3, #1
 8008f18:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1a:	bf00      	nop
  }
  return  speed;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7f9 f8af 	bl	80020a0 <HAL_HCD_ResetPort>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 f901 	bl	8009150 <USBH_Get_USB_Status>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	4611      	mov	r1, r2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7f9 f8b7 	bl	80020e6 <HAL_HCD_HC_GetXferCount>
 8008f78:	4603      	mov	r3, r0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f82:	b590      	push	{r4, r7, lr}
 8008f84:	b089      	sub	sp, #36	; 0x24
 8008f86:	af04      	add	r7, sp, #16
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4603      	mov	r3, r0
 8008f92:	70fb      	strb	r3, [r7, #3]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70bb      	strb	r3, [r7, #2]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008faa:	787c      	ldrb	r4, [r7, #1]
 8008fac:	78ba      	ldrb	r2, [r7, #2]
 8008fae:	78f9      	ldrb	r1, [r7, #3]
 8008fb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	f7f8 fcfc 	bl	80019be <HAL_HCD_HC_Init>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 f8bf 	bl	8009150 <USBH_Get_USB_Status>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd90      	pop	{r4, r7, pc}

08008fe0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ffa:	78fa      	ldrb	r2, [r7, #3]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f8 fd75 	bl	8001aee <HAL_HCD_HC_Halt>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f8a0 	bl	8009150 <USBH_Get_USB_Status>
 8009010:	4603      	mov	r3, r0
 8009012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009014:	7bbb      	ldrb	r3, [r7, #14]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800901e:	b590      	push	{r4, r7, lr}
 8009020:	b089      	sub	sp, #36	; 0x24
 8009022:	af04      	add	r7, sp, #16
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	461a      	mov	r2, r3
 800902c:	4603      	mov	r3, r0
 800902e:	70fb      	strb	r3, [r7, #3]
 8009030:	460b      	mov	r3, r1
 8009032:	70bb      	strb	r3, [r7, #2]
 8009034:	4613      	mov	r3, r2
 8009036:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009046:	787c      	ldrb	r4, [r7, #1]
 8009048:	78ba      	ldrb	r2, [r7, #2]
 800904a:	78f9      	ldrb	r1, [r7, #3]
 800904c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009050:	9303      	str	r3, [sp, #12]
 8009052:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009054:	9302      	str	r3, [sp, #8]
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	4623      	mov	r3, r4
 8009062:	f7f8 fd67 	bl	8001b34 <HAL_HCD_HC_SubmitRequest>
 8009066:	4603      	mov	r3, r0
 8009068:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	4618      	mov	r0, r3
 800906e:	f000 f86f 	bl	8009150 <USBH_Get_USB_Status>
 8009072:	4603      	mov	r3, r0
 8009074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009076:	7bbb      	ldrb	r3, [r7, #14]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	bd90      	pop	{r4, r7, pc}

08009080 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009092:	78fa      	ldrb	r2, [r7, #3]
 8009094:	4611      	mov	r1, r2
 8009096:	4618      	mov	r0, r3
 8009098:	f7f9 f810 	bl	80020bc <HAL_HCD_HC_GetURBState>
 800909c:	4603      	mov	r3, r0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d103      	bne.n	80090c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 f872 	bl	80091a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80090c4:	20c8      	movs	r0, #200	; 0xc8
 80090c6:	f7f8 f933 	bl	8001330 <HAL_Delay>
  return USBH_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
 80090e0:	4613      	mov	r3, r2
 80090e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80090ec:	78fa      	ldrb	r2, [r7, #3]
 80090ee:	68f9      	ldr	r1, [r7, #12]
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	440b      	add	r3, r1
 80090fa:	333b      	adds	r3, #59	; 0x3b
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	68f9      	ldr	r1, [r7, #12]
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	440b      	add	r3, r1
 8009110:	3350      	adds	r3, #80	; 0x50
 8009112:	78ba      	ldrb	r2, [r7, #2]
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	e009      	b.n	800912c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009118:	78fa      	ldrb	r2, [r7, #3]
 800911a:	68f9      	ldr	r1, [r7, #12]
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	440b      	add	r3, r1
 8009126:	3351      	adds	r3, #81	; 0x51
 8009128:	78ba      	ldrb	r2, [r7, #2]
 800912a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7f8 f8f4 	bl	8001330 <HAL_Delay>
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	2b03      	cmp	r3, #3
 8009162:	d817      	bhi.n	8009194 <USBH_Get_USB_Status+0x44>
 8009164:	a201      	add	r2, pc, #4	; (adr r2, 800916c <USBH_Get_USB_Status+0x1c>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	0800917d 	.word	0x0800917d
 8009170:	08009183 	.word	0x08009183
 8009174:	08009189 	.word	0x08009189
 8009178:	0800918f 	.word	0x0800918f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
    break;
 8009180:	e00b      	b.n	800919a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009182:	2302      	movs	r3, #2
 8009184:	73fb      	strb	r3, [r7, #15]
    break;
 8009186:	e008      	b.n	800919a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009188:	2301      	movs	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
    break;
 800918c:	e005      	b.n	800919a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800918e:	2302      	movs	r3, #2
 8009190:	73fb      	strb	r3, [r7, #15]
    break;
 8009192:	e002      	b.n	800919a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009194:	2302      	movs	r3, #2
 8009196:	73fb      	strb	r3, [r7, #15]
    break;
 8009198:	bf00      	nop
  }
  return usb_status;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	4603      	mov	r3, r0
 80091b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d102      	bne.n	80091c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e001      	b.n	80091c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	461a      	mov	r2, r3
 80091ca:	2101      	movs	r1, #1
 80091cc:	4803      	ldr	r0, [pc, #12]	; (80091dc <MX_DriverVbusFS+0x34>)
 80091ce:	f7f8 fb7b 	bl	80018c8 <HAL_GPIO_WritePin>
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	40020800 	.word	0x40020800

080091e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80091e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009218 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80091e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80091e6:	e003      	b.n	80091f0 <LoopCopyDataInit>

080091e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80091e8:	4b0c      	ldr	r3, [pc, #48]	; (800921c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80091ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80091ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80091ee:	3104      	adds	r1, #4

080091f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80091f0:	480b      	ldr	r0, [pc, #44]	; (8009220 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80091f2:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80091f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80091f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80091f8:	d3f6      	bcc.n	80091e8 <CopyDataInit>
  ldr  r2, =_sbss
 80091fa:	4a0b      	ldr	r2, [pc, #44]	; (8009228 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80091fc:	e002      	b.n	8009204 <LoopFillZerobss>

080091fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80091fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009200:	f842 3b04 	str.w	r3, [r2], #4

08009204 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009204:	4b09      	ldr	r3, [pc, #36]	; (800922c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009206:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009208:	d3f9      	bcc.n	80091fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800920a:	f7f7 fddd 	bl	8000dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800920e:	f000 f817 	bl	8009240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009212:	f7f7 fb81 	bl	8000918 <main>
  bx  lr    
 8009216:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009218:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800921c:	08009478 	.word	0x08009478
  ldr  r0, =_sdata
 8009220:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009224:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8009228:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800922c:	20000918 	.word	0x20000918

08009230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009230:	e7fe      	b.n	8009230 <ADC_IRQHandler>
	...

08009234 <__errno>:
 8009234:	4b01      	ldr	r3, [pc, #4]	; (800923c <__errno+0x8>)
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	2000002c 	.word	0x2000002c

08009240 <__libc_init_array>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	4e0d      	ldr	r6, [pc, #52]	; (8009278 <__libc_init_array+0x38>)
 8009244:	4c0d      	ldr	r4, [pc, #52]	; (800927c <__libc_init_array+0x3c>)
 8009246:	1ba4      	subs	r4, r4, r6
 8009248:	10a4      	asrs	r4, r4, #2
 800924a:	2500      	movs	r5, #0
 800924c:	42a5      	cmp	r5, r4
 800924e:	d109      	bne.n	8009264 <__libc_init_array+0x24>
 8009250:	4e0b      	ldr	r6, [pc, #44]	; (8009280 <__libc_init_array+0x40>)
 8009252:	4c0c      	ldr	r4, [pc, #48]	; (8009284 <__libc_init_array+0x44>)
 8009254:	f000 f8ee 	bl	8009434 <_init>
 8009258:	1ba4      	subs	r4, r4, r6
 800925a:	10a4      	asrs	r4, r4, #2
 800925c:	2500      	movs	r5, #0
 800925e:	42a5      	cmp	r5, r4
 8009260:	d105      	bne.n	800926e <__libc_init_array+0x2e>
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009268:	4798      	blx	r3
 800926a:	3501      	adds	r5, #1
 800926c:	e7ee      	b.n	800924c <__libc_init_array+0xc>
 800926e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009272:	4798      	blx	r3
 8009274:	3501      	adds	r5, #1
 8009276:	e7f2      	b.n	800925e <__libc_init_array+0x1e>
 8009278:	08009470 	.word	0x08009470
 800927c:	08009470 	.word	0x08009470
 8009280:	08009470 	.word	0x08009470
 8009284:	08009474 	.word	0x08009474

08009288 <malloc>:
 8009288:	4b02      	ldr	r3, [pc, #8]	; (8009294 <malloc+0xc>)
 800928a:	4601      	mov	r1, r0
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	f000 b861 	b.w	8009354 <_malloc_r>
 8009292:	bf00      	nop
 8009294:	2000002c 	.word	0x2000002c

08009298 <free>:
 8009298:	4b02      	ldr	r3, [pc, #8]	; (80092a4 <free+0xc>)
 800929a:	4601      	mov	r1, r0
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	f000 b80b 	b.w	80092b8 <_free_r>
 80092a2:	bf00      	nop
 80092a4:	2000002c 	.word	0x2000002c

080092a8 <memset>:
 80092a8:	4402      	add	r2, r0
 80092aa:	4603      	mov	r3, r0
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d100      	bne.n	80092b2 <memset+0xa>
 80092b0:	4770      	bx	lr
 80092b2:	f803 1b01 	strb.w	r1, [r3], #1
 80092b6:	e7f9      	b.n	80092ac <memset+0x4>

080092b8 <_free_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4605      	mov	r5, r0
 80092bc:	2900      	cmp	r1, #0
 80092be:	d045      	beq.n	800934c <_free_r+0x94>
 80092c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c4:	1f0c      	subs	r4, r1, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfb8      	it	lt
 80092ca:	18e4      	addlt	r4, r4, r3
 80092cc:	f000 f8b0 	bl	8009430 <__malloc_lock>
 80092d0:	4a1f      	ldr	r2, [pc, #124]	; (8009350 <_free_r+0x98>)
 80092d2:	6813      	ldr	r3, [r2, #0]
 80092d4:	4610      	mov	r0, r2
 80092d6:	b933      	cbnz	r3, 80092e6 <_free_r+0x2e>
 80092d8:	6063      	str	r3, [r4, #4]
 80092da:	6014      	str	r4, [r2, #0]
 80092dc:	4628      	mov	r0, r5
 80092de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e2:	f000 b8a6 	b.w	8009432 <__malloc_unlock>
 80092e6:	42a3      	cmp	r3, r4
 80092e8:	d90c      	bls.n	8009304 <_free_r+0x4c>
 80092ea:	6821      	ldr	r1, [r4, #0]
 80092ec:	1862      	adds	r2, r4, r1
 80092ee:	4293      	cmp	r3, r2
 80092f0:	bf04      	itt	eq
 80092f2:	681a      	ldreq	r2, [r3, #0]
 80092f4:	685b      	ldreq	r3, [r3, #4]
 80092f6:	6063      	str	r3, [r4, #4]
 80092f8:	bf04      	itt	eq
 80092fa:	1852      	addeq	r2, r2, r1
 80092fc:	6022      	streq	r2, [r4, #0]
 80092fe:	6004      	str	r4, [r0, #0]
 8009300:	e7ec      	b.n	80092dc <_free_r+0x24>
 8009302:	4613      	mov	r3, r2
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	b10a      	cbz	r2, 800930c <_free_r+0x54>
 8009308:	42a2      	cmp	r2, r4
 800930a:	d9fa      	bls.n	8009302 <_free_r+0x4a>
 800930c:	6819      	ldr	r1, [r3, #0]
 800930e:	1858      	adds	r0, r3, r1
 8009310:	42a0      	cmp	r0, r4
 8009312:	d10b      	bne.n	800932c <_free_r+0x74>
 8009314:	6820      	ldr	r0, [r4, #0]
 8009316:	4401      	add	r1, r0
 8009318:	1858      	adds	r0, r3, r1
 800931a:	4282      	cmp	r2, r0
 800931c:	6019      	str	r1, [r3, #0]
 800931e:	d1dd      	bne.n	80092dc <_free_r+0x24>
 8009320:	6810      	ldr	r0, [r2, #0]
 8009322:	6852      	ldr	r2, [r2, #4]
 8009324:	605a      	str	r2, [r3, #4]
 8009326:	4401      	add	r1, r0
 8009328:	6019      	str	r1, [r3, #0]
 800932a:	e7d7      	b.n	80092dc <_free_r+0x24>
 800932c:	d902      	bls.n	8009334 <_free_r+0x7c>
 800932e:	230c      	movs	r3, #12
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	e7d3      	b.n	80092dc <_free_r+0x24>
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	1821      	adds	r1, r4, r0
 8009338:	428a      	cmp	r2, r1
 800933a:	bf04      	itt	eq
 800933c:	6811      	ldreq	r1, [r2, #0]
 800933e:	6852      	ldreq	r2, [r2, #4]
 8009340:	6062      	str	r2, [r4, #4]
 8009342:	bf04      	itt	eq
 8009344:	1809      	addeq	r1, r1, r0
 8009346:	6021      	streq	r1, [r4, #0]
 8009348:	605c      	str	r4, [r3, #4]
 800934a:	e7c7      	b.n	80092dc <_free_r+0x24>
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	bf00      	nop
 8009350:	200000b8 	.word	0x200000b8

08009354 <_malloc_r>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	1ccd      	adds	r5, r1, #3
 8009358:	f025 0503 	bic.w	r5, r5, #3
 800935c:	3508      	adds	r5, #8
 800935e:	2d0c      	cmp	r5, #12
 8009360:	bf38      	it	cc
 8009362:	250c      	movcc	r5, #12
 8009364:	2d00      	cmp	r5, #0
 8009366:	4606      	mov	r6, r0
 8009368:	db01      	blt.n	800936e <_malloc_r+0x1a>
 800936a:	42a9      	cmp	r1, r5
 800936c:	d903      	bls.n	8009376 <_malloc_r+0x22>
 800936e:	230c      	movs	r3, #12
 8009370:	6033      	str	r3, [r6, #0]
 8009372:	2000      	movs	r0, #0
 8009374:	bd70      	pop	{r4, r5, r6, pc}
 8009376:	f000 f85b 	bl	8009430 <__malloc_lock>
 800937a:	4a23      	ldr	r2, [pc, #140]	; (8009408 <_malloc_r+0xb4>)
 800937c:	6814      	ldr	r4, [r2, #0]
 800937e:	4621      	mov	r1, r4
 8009380:	b991      	cbnz	r1, 80093a8 <_malloc_r+0x54>
 8009382:	4c22      	ldr	r4, [pc, #136]	; (800940c <_malloc_r+0xb8>)
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	b91b      	cbnz	r3, 8009390 <_malloc_r+0x3c>
 8009388:	4630      	mov	r0, r6
 800938a:	f000 f841 	bl	8009410 <_sbrk_r>
 800938e:	6020      	str	r0, [r4, #0]
 8009390:	4629      	mov	r1, r5
 8009392:	4630      	mov	r0, r6
 8009394:	f000 f83c 	bl	8009410 <_sbrk_r>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d126      	bne.n	80093ea <_malloc_r+0x96>
 800939c:	230c      	movs	r3, #12
 800939e:	6033      	str	r3, [r6, #0]
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 f846 	bl	8009432 <__malloc_unlock>
 80093a6:	e7e4      	b.n	8009372 <_malloc_r+0x1e>
 80093a8:	680b      	ldr	r3, [r1, #0]
 80093aa:	1b5b      	subs	r3, r3, r5
 80093ac:	d41a      	bmi.n	80093e4 <_malloc_r+0x90>
 80093ae:	2b0b      	cmp	r3, #11
 80093b0:	d90f      	bls.n	80093d2 <_malloc_r+0x7e>
 80093b2:	600b      	str	r3, [r1, #0]
 80093b4:	50cd      	str	r5, [r1, r3]
 80093b6:	18cc      	adds	r4, r1, r3
 80093b8:	4630      	mov	r0, r6
 80093ba:	f000 f83a 	bl	8009432 <__malloc_unlock>
 80093be:	f104 000b 	add.w	r0, r4, #11
 80093c2:	1d23      	adds	r3, r4, #4
 80093c4:	f020 0007 	bic.w	r0, r0, #7
 80093c8:	1ac3      	subs	r3, r0, r3
 80093ca:	d01b      	beq.n	8009404 <_malloc_r+0xb0>
 80093cc:	425a      	negs	r2, r3
 80093ce:	50e2      	str	r2, [r4, r3]
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
 80093d2:	428c      	cmp	r4, r1
 80093d4:	bf0d      	iteet	eq
 80093d6:	6863      	ldreq	r3, [r4, #4]
 80093d8:	684b      	ldrne	r3, [r1, #4]
 80093da:	6063      	strne	r3, [r4, #4]
 80093dc:	6013      	streq	r3, [r2, #0]
 80093de:	bf18      	it	ne
 80093e0:	460c      	movne	r4, r1
 80093e2:	e7e9      	b.n	80093b8 <_malloc_r+0x64>
 80093e4:	460c      	mov	r4, r1
 80093e6:	6849      	ldr	r1, [r1, #4]
 80093e8:	e7ca      	b.n	8009380 <_malloc_r+0x2c>
 80093ea:	1cc4      	adds	r4, r0, #3
 80093ec:	f024 0403 	bic.w	r4, r4, #3
 80093f0:	42a0      	cmp	r0, r4
 80093f2:	d005      	beq.n	8009400 <_malloc_r+0xac>
 80093f4:	1a21      	subs	r1, r4, r0
 80093f6:	4630      	mov	r0, r6
 80093f8:	f000 f80a 	bl	8009410 <_sbrk_r>
 80093fc:	3001      	adds	r0, #1
 80093fe:	d0cd      	beq.n	800939c <_malloc_r+0x48>
 8009400:	6025      	str	r5, [r4, #0]
 8009402:	e7d9      	b.n	80093b8 <_malloc_r+0x64>
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	bf00      	nop
 8009408:	200000b8 	.word	0x200000b8
 800940c:	200000bc 	.word	0x200000bc

08009410 <_sbrk_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4c06      	ldr	r4, [pc, #24]	; (800942c <_sbrk_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4605      	mov	r5, r0
 8009418:	4608      	mov	r0, r1
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	f7f7 fca8 	bl	8000d70 <_sbrk>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_sbrk_r+0x1a>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	b103      	cbz	r3, 800942a <_sbrk_r+0x1a>
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000914 	.word	0x20000914

08009430 <__malloc_lock>:
 8009430:	4770      	bx	lr

08009432 <__malloc_unlock>:
 8009432:	4770      	bx	lr

08009434 <_init>:
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	bf00      	nop
 8009438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943a:	bc08      	pop	{r3}
 800943c:	469e      	mov	lr, r3
 800943e:	4770      	bx	lr

08009440 <_fini>:
 8009440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009442:	bf00      	nop
 8009444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009446:	bc08      	pop	{r3}
 8009448:	469e      	mov	lr, r3
 800944a:	4770      	bx	lr
